package com.ideassoft.ems.controller;


import java.io.DataOutputStream;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;
import org.hsqldb.lib.StringUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.alipay.api.domain.Member;
import com.ideassoft.basic.controller.DoorController;
import com.ideassoft.bean.Branch;
import com.ideassoft.bean.Check;
import com.ideassoft.bean.CheckUser;
import com.ideassoft.bean.Contrart;
import com.ideassoft.bean.ControlLog;
import com.ideassoft.bean.Equipment;
import com.ideassoft.bean.FixedUserInDoor;
import com.ideassoft.bean.Staff;
import com.ideassoft.core.ajax.AjaxResult;
import com.ideassoft.core.bean.LoginUser;
import com.ideassoft.core.constants.CommonConstants;
import com.ideassoft.core.constants.SystemConstants;
import com.ideassoft.crm.service.InitialService;
import com.ideassoft.crm.service.TransferServcie;
import com.ideassoft.pms.service.RoomService;
import com.ideassoft.util.CardUtil;
import com.ideassoft.util.DateUtil;
import com.ideassoft.util.JSONUtil;
import com.ideassoft.util.MD5Util;
import com.ideassoft.util.RequestUtil;

@Transactional
@Controller
public class GateLockController {
	
	private static Logger log = Logger.getLogger(DoorController.class);
	
	@Autowired
	RoomService roomService;
	
	@Autowired
	InitialService initialService;
	
	//远程开锁
	@RequestMapping("/gateLock.do")
	public void gateLock(HttpServletRequest req,HttpServletResponse resp, String lockno, String LockType,String cardno){
		try{
			String username_wb = SystemConstants.GateLock.USER_NAME;
			String timestamp = DateUtil.t2s(new Date());
			String key = SystemConstants.GateLock.KEY;
			String appId = SystemConstants.GateLock.APP_ID;
			List<?> list = roomService.findBySQL("queryIdByLockNo", new String[]{lockno},true);
			String gatewayNo = ((Map<?, ?>) list.get(0)).get("GATEWAY_NO").toString();
			String deviceNo = lockno;
			String type = LockType;
			String password = SystemConstants.GateLock.GATELOCK_PASSWORD;
			String gatePassword = SystemConstants.GateLock.PASSWORD;
			String locakUserName = "wsqh";
			Integer passwordType = 0;
			String password_wb = "";
			String md5pwd = "";
			String branchide = "";
			String flooride = "";
			String roomide = "";
			String recordUser = "";
			String orderId = "";
			if(type.equals("1")){
				md5pwd = "app_id="+appId+"&deviceNo="+deviceNo+"&gatewayNo="+gatewayNo+"&key="+key+"&password="+password+"&timestamp="+timestamp+"" +
				"&type="+type+"&username_wb="+username_wb+"&password="+gatePassword+"";
			}else if(type.equals("3") || type.equals("5")){
				passwordType = 3;
				password = cardno;
				md5pwd = "app_id="+appId+"&deviceNo="+deviceNo+"&gatewayNo="+gatewayNo+"&key="+key+"&locakUserName="+locakUserName+"&password="+password+"&passwordType="+passwordType+"&timestamp="+timestamp+"" +
				"&type="+type+"&username_wb="+username_wb+"&password="+gatePassword+"";
			}else if(type.equals("2") || type.equals("4")){
				md5pwd = "app_id="+appId+"&deviceNo="+deviceNo+"&gatewayNo="+gatewayNo+"&key="+key+"&locakUserName="+locakUserName+"&password="+password+"&timestamp="+timestamp+"" +
				"&type="+type+"&username_wb="+username_wb+"&password="+gatePassword+"";
			}
			//签名信息
			password_wb = MD5Util.getCryptogram(md5pwd);
		
			URL url = new URL(SystemConstants.GateLock.WS_URL_Lock);
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setDoOutput(true);  
			connection.setDoInput(true);  
			connection.setRequestMethod("POST");  
			connection.setUseCaches(false);  
			connection.setInstanceFollowRedirects(true);  
			connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");   
			connection.connect();
			DataOutputStream dataout = new DataOutputStream(connection.getOutputStream());  
			String decode = "";
			if(type.equals("1")){
				decode = "app_id="+appId+"&username_wb="+username_wb+"&timestamp="+timestamp+"&key="+key+"&gatewayNo="+gatewayNo+"" +
				"&deviceNo="+deviceNo+"&type="+type+"&password_wb="+password_wb+"&password="+password;
			}else if(type.equals("3") || type.equals("5")){
				passwordType = 3;
				password = cardno;
				decode = "app_id="+appId+"&username_wb="+username_wb+"&timestamp="+timestamp+"&key="+key+"&gatewayNo="+gatewayNo+"" +
				"&deviceNo="+deviceNo+"&type="+type+"&passwordType="+passwordType+"&locakUserName="+locakUserName+"&password_wb="+password_wb+"&password="+password;
			}else if(type.equals("2") || type.equals("4")){
				decode = "app_id="+appId+"&username_wb="+username_wb+"&timestamp="+timestamp+"&key="+key+"&gatewayNo="+gatewayNo+"" +
				"&deviceNo="+deviceNo+"&type="+type+"&locakUserName="+locakUserName+"&password_wb="+password_wb+"&password="+password;
			}
			dataout.writeBytes(decode);  
			dataout.flush();  
			dataout.close();   
			InputStream is = connection.getInputStream();
	        int size = is.available();
	        byte[] jsonBytes = new byte[size];
	        is.read(jsonBytes);
	        String message = new String(jsonBytes, "UTF-8");
	        JSONObject demoJson =  JSONObject.fromObject(message);
	        String err = demoJson.getString("err");
	        if(err.equals("0")){
	            JSONUtil.responseJSON(resp, new AjaxResult(1, demoJson.getString("err_msg")));
	        } else {
	        	JSONUtil.responseJSON(resp, new AjaxResult(0, demoJson.getString("err_msg")));
	        }
	        is.close();
			connection.disconnect(); 
			//记录开门日志
			ControlLog cl = new ControlLog();
			Equipment e = (Equipment)initialService.findOneByProperties(Equipment.class, "serialNo", lockno);
			if(e != null){
				branchide = e.getBranchId();
				flooride = e.getFloorId();
				roomide = e.getRoomId();
			}
			List<?> mList = initialService.findByProperties(Member.class, "idcard", cardno, "status", "1");
			List<?> sList = initialService.findByProperties(Staff.class, "idcard", cardno, "status", "1");
			if(mList != null && mList.size() >= 1){
				recordUser = ((com.ideassoft.bean.Member)mList.get(0)).getMemberId();
				List<?> order = initialService.findByProperties(Check.class, "branchId",branchide,"roomId",roomide, "status", "1");
				List<?> contract = initialService.findByProperties(Contrart.class, "branchId",branchide,"roomId",roomide, "status", "1");
				List<?> contracts = initialService.findByProperties(Contrart.class, "branchId",branchide,"roomId",roomide, "status", "4");
				if(order != null && order.size() >= 1){
					orderId = ((Check)order.get(0)).getCheckId();
				} else if (contract != null && contract.size() >= 1){
					orderId = ((Contrart)contract.get(0)).getContrartId();
				} else if (contracts != null && contracts.size() >= 1){
					orderId = ((Contrart)contracts.get(0)).getContrartId();;
				}
			} else if (sList != null && sList.size() >= 1){
				recordUser = ((Staff)sList.get(0)).getStaffId();
			} else {
				recordUser = "-1";
			}
			String logId = initialService.getCloudOrLocalSequence("SEQ_CONTROLLOG_ID");
			/*cl.setLogId(logId);
			cl.setBranchId(branchide);
			cl.setFloorId(flooride);
			cl.setRoomId(roomide);
			cl.setOperCommand("1");
			cl.setOrderId(orderId);*/
			cl.setRecordTime(new Date());
			cl.setRecordUser(recordUser);
			cl.setStatus("1");
			cl.setRemark(lockno);
			initialService.getHibernateTemplate().save(cl);
		} catch (Exception e) {
        	JSONUtil.responseJSON(resp, new AjaxResult(-1, null));
        }
	}
	
	
	
	@RequestMapping("addAndDeleteUser.do")
	public ModelAndView addAndDeleteUser(HttpServletRequest request,HttpServletResponse response) throws Exception {
		String branchId = request.getParameter("branchId");
		String roomId = request.getParameter("roomId");
		String lockno = request.getParameter("lockno");
		String isCheck = request.getParameter("isCheck");
		//Branch bha = (Branch)roomService.findOneByProperties(Branch.class, "rank", "0", "status","1");
		String branchIdNum = request.getParameter("branchIdNum");
		String gatewayCode = request.getParameter("gatewayCode");
		
		String flag = "0";
		String checkIdOrContract = "";
		String type = "";
		List checkUserList = new ArrayList();
		ModelAndView mv = new ModelAndView();
		
		//查询在住订单中用户
		if(isCheck.equals(SystemConstants.ParamType.ISCHECK)){
			if(!branchIdNum.contains("H")){
				Branch bh = (Branch)roomService.findOneByProperties(Branch.class, "branchId", branchIdNum, "status","1");
				if(bh.getBranchType().equals("2")){
					Contrart ck = (Contrart) roomService.findOneByProperties(Contrart.class, "branchId", branchIdNum, "roomId",roomId, "status","4");
					if(ck != null){
						checkUserList = roomService.findByPropertiesWithSort(CheckUser.class, "checkuserType", "asc", "checkId", ck.getContrartId(), "status","1","checkinType","2");
						checkIdOrContract = ck.getContrartId();
					}
					type = "2";
				}else{
					Check ck = (Check) roomService.findOneByProperties(Check.class, "branchId", branchIdNum, "roomId",roomId, "status","1");
					if(ck != null){
						checkUserList = roomService.findByPropertiesWithSort(CheckUser.class, "checkuserType", "asc", "checkId", ck.getCheckId(), "status","1","checkinType","2");
						checkIdOrContract = ck.getCheckId();
					}
					type = "1";
				}
			} else {
				Check ck = (Check) roomService.findOneByProperties(Check.class, "branchId", branchIdNum, "roomId",roomId, "status","1");
				if(ck != null){
					checkUserList = roomService.findByPropertiesWithSort(CheckUser.class, "checkuserType", "asc", "checkId", ck.getCheckId(), "status","1","checkinType","2");
					checkIdOrContract = ck.getCheckId();
				}
				type = "1";	
			}
			if(checkUserList.size() > 0){
				flag = "1";
				mv.addObject("checkUserList", checkUserList);
			}
		}
		mv.addObject("flag", flag);
		//查询绑定在门锁上的用户
		List<?> FixedUserList = roomService.findByPropertiesWithSort(FixedUserInDoor.class,"recordTime", "asc", "equipSerialNo", lockno,"status","1");
		if(FixedUserList.size() > 0){
			mv.addObject("FixedUserList", FixedUserList);
		} else {
			mv.addObject("FixedUserList", null);
		}
		mv.addObject("serialNo", lockno);
		mv.addObject("gatewayCode", gatewayCode);
		mv.addObject("checkIdOrContract", checkIdOrContract);
		mv.addObject("type", type);
		mv.setViewName("page/ems/emssystem/addAndDeleteFixedUser");
		return mv;
	}
	
	@RequestMapping("/saveNewFixedUser.do")
	public void saveNewFixedUser(HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		String parameter = request.getParameter("myForm");
		String serialNo = request.getParameter("serialNo");
		String gatewayCode = request.getParameter("gatewayCode");
		String checkIdOrContract = request.getParameter("checkIdOrContract");
		String type = request.getParameter("type");
		List<FixedUserInDoor> list = new ArrayList<FixedUserInDoor>();
		net.sf.json.JSONArray jsonArray = net.sf.json.JSONArray.fromObject(parameter);
		net.sf.json.JSONObject jsonObject = null;
		FixedUserInDoor a = null;
		Object checkInUser = null;
		String flag = "0";
		String dataToDoorFlag = "0";
		for (int i = 0; i < jsonArray.size(); i++) {
			jsonObject = jsonArray.getJSONObject(i);
			FixedUserInDoor q = (FixedUserInDoor)initialService.findOneByProperties(FixedUserInDoor.class, "equipSerialNo", serialNo, "idcard", jsonObject.getString("idcard"), "status", "1");
			if(type.equals("2")){
				checkInUser = roomService.findOneByProperties(CheckUser.class, "checkuserType", "asc", "checkId", checkIdOrContract, "status","1","checkinType","2");
			}else{
				checkInUser = roomService.findOneByProperties(CheckUser.class, "checkuserType", "asc", "checkId", checkIdOrContract, "status","1","checkinType","2");
			}
			
			try {
				String startTimetemp = jsonObject.getString("startTime").toString().replace("/", "").replace(":", "").replace(" ", "");
				String endTimetemp = jsonObject.getString("endTime").toString().replace("/", "").replace(":", "").replace(" ", "");
				Integer result = CardUtil.doorAddCardData(request, response , gatewayCode, serialNo, jsonObject.getString("userName").toString(), jsonObject.getString("idcard").toString(), startTimetemp, endTimetemp);
				if(result != CommonConstants.PortalResultCode.FAILED && !result.toString().equals(CommonConstants.doorInterfaceResult.FAILED)){
					dataToDoorFlag = "0";
					//JSONUtil.responseJSON(response, new AjaxResult(Integer.parseInt(CommonConstants.doorReturnToJs.SUCESS),"数据添加成功！"));	
				} else {
					dataToDoorFlag = "1";
					//JSONUtil.responseJSON(response, new AjaxResult(Integer.parseInt(CommonConstants.doorReturnToJs.FAILED),"数据添加失败！"));
				}	 
			} catch (Exception e) {
				log.error("transfer doordata  to door occurs error! " + e.getMessage());
				dataToDoorFlag = "1";
				JSONUtil.responseJSON(response, new AjaxResult(Integer.parseInt(CommonConstants.doorReturnToJs.FAILED),"数据写入门锁接口失败！"));
			}
			
			
			if(q == null && checkInUser == null && dataToDoorFlag.equals("0")){ 
				a = new FixedUserInDoor();
				LoginUser loginUser = (LoginUser) request.getSession(true).getAttribute(RequestUtil.LOGIN_USER_SESSION_KEY);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
				Date startdate = sdf.parse(jsonObject.getString("startTime").toString());
				Date enddate = sdf.parse(jsonObject.getString("endTime").toString());
				a.setEquipSerialNo(serialNo);
				a.setGender("1");
				a.setIdcard(jsonObject.getString("idcard").toString());
				a.setMobile(jsonObject.getString("mobile").toString());
				a.setEndTime(enddate);
				a.setStartTime(startdate);
				a.setRecordTime(new Date());
				a.setRecordUser(loginUser.getStaff().getStaffId());
				a.setSourceType("4");
				a.setStatus("1");
				a.setUserId(initialService.getCloudOrLocalSequence("SEQ_FIXEDUSERINDOOR_ID"));
				a.setUserName(jsonObject.getString("userName").toString());
				initialService.getHibernateTemplate().save(a);
				//数据转发流程
				/*Map<String, Object> mapList = new HashMap<String, Object>();
				List<FixedUserInDoor> fixedUserList = new ArrayList();
				fixedUserList.add(a);
				mapList.put("FixedUserInDoor", fixedUserList);	
				//查询当前登陆者的门店应为加盟还是自营
				Branch bc = (Branch)initialService.findOneByProperties(Branch.class, "branchId", loginUser.getStaff().getBranchId());
				//若在本地数据库添加，要数据转发
				if(!initialService.checkSystemExistCloud()){
					//若在本地数据库添加，要数据转发到云端
					String branchIpValue = CommonConstants.MarketCenterIpValue.centerIpValue;
					TransferServcie.getInstance().transferData(1, branchIpValue, JSONUtil.fromObject(mapList).toString());
				} else if(initialService.checkSystemExistCloud() && bc != null && bc.getBranchIp() != null && !StringUtil.isEmpty(bc.getBranchIp())){
					//若自营在云端添加，数据要下发到本地数据库
					TransferServcie.getInstance().transferData(1, bc.getBranchIp(), JSONUtil.fromObject(mapList).toString());
				}*/
			} else {
				flag = "1";
				break;
			}
		}
		if(flag.equals("0") && dataToDoorFlag.equals("0")){
			JSONUtil.responseJSON(response, new AjaxResult(CommonConstants.AJAXRESULT.SUCESS, null));
		} else if (dataToDoorFlag.equals("1")){
			JSONUtil.responseJSON(response, new AjaxResult(CommonConstants.AJAXRESULT.FALSE, "dataToDoorFlase"));
		} else {
			JSONUtil.responseJSON(response, new AjaxResult(CommonConstants.AJAXRESULT.SUCESS, "again"));
		}
	}
	
	
	@RequestMapping("/deleteNewFixedUser.do")
	public void deleteNewFixedUser(HttpServletRequest request, HttpServletResponse response) throws Exception {
		String userId = request.getParameter("userId");
		String cardNumb = request.getParameter("idcard");
		String serialNo = request.getParameter("serialNo");
		String dataToDoorFlag = "0";
		FixedUserInDoor a = (FixedUserInDoor)initialService.findOneByProperties(FixedUserInDoor.class, "userId",userId);
		LoginUser loginUser = (LoginUser) request.getSession(true).getAttribute(RequestUtil.LOGIN_USER_SESSION_KEY);
		
		try {
			Integer result = CardUtil.doorDelCardData(request, response, serialNo, cardNumb);
			if(result != CommonConstants.PortalResultCode.FAILED && !result.toString().equals(CommonConstants.doorInterfaceResult.FAILED)){
				dataToDoorFlag = "0";
				//JSONUtil.responseJSON(response, new AjaxResult(Integer.parseInt(CommonConstants.doorReturnToJs.SUCESS),"数据删除成功！"));	
			} else {
				dataToDoorFlag = "1";
				//JSONUtil.responseJSON(response, new AjaxResult(Integer.parseInt(CommonConstants.doorReturnToJs.FAILED),"数据删除失败！"));
			}	 
		} catch (Exception e) {
			log.error("transfer data occurs error! " + e.getMessage());
			dataToDoorFlag = "1";
			//JSONUtil.responseJSON(response, new AjaxResult(Integer.parseInt(CommonConstants.doorReturnToJs.FAILED),"数据删除失败！"));
		}
		
		
		if(a != null && dataToDoorFlag.equals("0")){
			a.setStatus("0");
			a.setRecordTime(new Date());
			initialService.getHibernateTemplate().saveOrUpdate(a);
			//数据转发流程
			/*Map<String, Object> mapList = new HashMap<String, Object>();
			List<FixedUserInDoor> fixedUserList = new ArrayList();
			fixedUserList.add(a);
			mapList.put("FixedUserInDoor", fixedUserList);	
			//查询当前登陆者的门店应为加盟还是自营
			Branch bc = (Branch)initialService.findOneByProperties(Branch.class, "branchId", loginUser.getStaff().getBranchId());
			//若在本地数据库添加，要数据转发
			if(!initialService.checkSystemExistCloud()){
				//若在本地数据库添加，要数据转发到云端
				String branchIpValue = CommonConstants.MarketCenterIpValue.centerIpValue;
				TransferServcie.getInstance().transferData(1, branchIpValue, JSONUtil.fromObject(mapList).toString());
			} else if(initialService.checkSystemExistCloud() && bc != null && bc.getBranchIp() != null && !StringUtil.isEmpty(bc.getBranchIp())){
				//若自营在云端添加，数据要下发到本地数据库
				TransferServcie.getInstance().transferData(1, bc.getBranchIp(), JSONUtil.fromObject(mapList).toString());
			}*/
			JSONUtil.responseJSON(response, new AjaxResult(CommonConstants.AJAXRESULT.SUCESS, null));
		} else if (dataToDoorFlag.equals("1")){
			JSONUtil.responseJSON(response, new AjaxResult(CommonConstants.AJAXRESULT.FALSE, "dataToDoorFlase"));
		} else {
			JSONUtil.responseJSON(response, new AjaxResult(CommonConstants.AJAXRESULT.FALSE, null));
		}
	}
	
}
