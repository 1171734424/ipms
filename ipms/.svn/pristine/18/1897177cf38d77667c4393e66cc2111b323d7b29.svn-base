package com.ideassoft.pmsinhouse.controller;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.hsqldb.lib.StringUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.alipay.api.AlipayApiException;
import com.ideassoft.bean.Bill;
import com.ideassoft.bean.Check;
import com.ideassoft.bean.Member;
import com.ideassoft.bean.MemberAccount;
import com.ideassoft.bean.OffsetLog;
import com.ideassoft.bean.Order;
import com.ideassoft.bean.Recording;
import com.ideassoft.bean.RefundDetail;
import com.ideassoft.bean.RoomMapping;
import com.ideassoft.bean.Staff;
import com.ideassoft.bean.SysParam;
import com.ideassoft.bean.wrapper.CheckAllAmount;
import com.ideassoft.bean.wrapper.CheckoutRoom;
import com.ideassoft.bean.wrapper.MultiQueryCheck;
import com.ideassoft.core.ajax.AjaxResult;
import com.ideassoft.core.annotation.interfaces.RightMethodControl;
import com.ideassoft.core.bean.LoginUser;
import com.ideassoft.core.constants.CommonConstants;
import com.ideassoft.core.constants.RightConstants;
import com.ideassoft.core.page.Pagination;
import com.ideassoft.pmsinhouse.service.AliPayInHouseService;
import com.ideassoft.pmsinhouse.service.HouseRefundService;
import com.ideassoft.util.DateUtil;
import com.ideassoft.util.JSONUtil;
import com.ideassoft.util.PriceUtil;
import com.ideassoft.util.ReflectUtil;
import com.ideassoft.util.RequestUtil;
import com.ideassoft.util.RoomUtil;
import com.ideassoft.wechatrefund.WeChatPayServiceImpl;
import com.ideassoft.wechatrefund.WeChatRefundReqModel;
import com.ideassoft.wechatrefund.WeChatRefundResModel;

@Transactional
@Controller
public class HouseRefundController {
	
	@Autowired
	private HouseRefundService houseRefundService;
	
	@Autowired
	private WeChatPayServiceImpl weChatPayServiceImpl;
	
	@Autowired
	private AliPayInHouseService aliPayServiceImpl;
	
	@RequestMapping("/houseRefund.do")
	public ModelAndView houseRefund(HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("page/ipmshouse/leftmenu/houserefund/houserefund");
		return mv;
	}
	
	@RequestMapping("/houseRefundAll.do")
	public ModelAndView houseRefundAll(HttpServletRequest request, HttpServletResponse response) throws Exception {
		ModelAndView mv = new ModelAndView();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
		LoginUser loginUser = (LoginUser) request.getSession(true).getAttribute(RequestUtil.LOGIN_USER_SESSION_KEY);
		Pagination pagination = (Pagination) ReflectUtil.setBeanFromRequest(request, Pagination.class);
		if (pagination != null && pagination.getPageNum() == null) {
			pagination.setPageNum(1);
			pagination.setRows(11);
		}
		String orderUser = request.getParameter("orderUser");
		String memberId = request.getParameter("memberId");
		String memberName = request.getParameter("memberName");
		String arrivalTime = request.getParameter("arrivalTime");
		String leaveTime = request.getParameter("leaveTime");
		String source = request.getParameter("source");
		String roomType = request.getParameter("roomType");
		String mobile = request.getParameter("mobile");
		String reservedTime = request.getParameter("reservedTime");
		String recordUser = request.getParameter("recordUser");
		
		if (!StringUtils.isEmpty(reservedTime)) {
			Calendar dayTime = Calendar.getInstance();
			dayTime.setTime(sdf.parse(reservedTime));
			dayTime.add(Calendar.DAY_OF_MONTH, -2);
			reservedTime = sdf.format(dayTime.getTime());
		}
		List<?> list = houseRefundService.findBySQLWithPagination(
				"HouseCheckOutOrder", new String[] { orderUser, memberId,
						memberName, arrivalTime, leaveTime, source, roomType,
						mobile, recordUser, loginUser.getStaff().getStaffId(),
					reservedTime },
				pagination, true);
		mv.addObject("list", list);
		mv.addObject("orderuser", memberName);
		mv.addObject("mobile", mobile);
		mv.addObject("ordertime", reservedTime);
		mv.addObject("pagination", pagination);
		mv.setViewName("page/ipmshouse/leftmenu/houserefund/houserefundinfo");
		return mv;
	}
	
	@RequestMapping("/RefundMoney.do")
	public ModelAndView refundMoney(HttpServletRequest request,
			HttpServletResponse response, String checkid) throws Exception {
		ModelAndView mv = new ModelAndView();
		mv.addObject("checkid", checkid);
		mv.setViewName("page/ipmshouse/leftmenu/houserefund/houserefuntbill");
		return mv;
	}
	
	@RequestMapping("/showHouseAddBill.do")
	public ModelAndView showHouseAddBill(HttpServletRequest request) {
		String checkid = request.getParameter("checkid");
		ModelAndView mv = new ModelAndView();
		mv.addObject("checkid", checkid);
		mv.setViewName("/page/ipmshouse/leftmenu/houserefund/add_bill");
		return mv;
	}
	
	/**
	 * 民宿入账查询消费、结算
	 * 
	 * @param request
	 * @param response
	 */
	@RequestMapping("/getHouseProject.do")
	public void getHouseProject(HttpServletRequest request, HttpServletResponse response) {
		String sqltype = "queryprojecttype";
		String sqlallproejct = "queryHouseAllProject";
		List<Map<String, Object>> projecttype = houseRefundService.findBySQL(sqltype, true);
		Map<Object, Map<String, String>> allkingmap = new HashMap<Object, Map<String, String>>();
		for (Map<String, Object> map : projecttype) {
			Object orderno = map.get("ORDERNO");
			Object paramdesc = map.get("PARAMDESC");
			List<Map<String, String>> allkindproject = houseRefundService.findBySQL(sqlallproejct, 
					new String[] {CommonConstants.SysparamStatus.VALID, orderno.toString(),CommonConstants.SystemTheme.HOMESTAY }, true);
			Map<String, String> resultallkind = new HashMap<String, String>();
			for (Map<String, String> map2 : allkindproject) {
				String content = map2.get("CONTENT");
				String paramname = map2.get("PARAMNAME");
				resultallkind.put(content, paramname);
				allkingmap.put(paramdesc, resultallkind);
			}
		}
		JSONUtil.responseJSON(response, allkingmap);
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping("/loadHousePayandCost.do")
	public void loadpayandcost(HttpServletRequest request, HttpServletResponse response, String checkid) {
		//Check check = (Check) houseRefundService.findById(Check.class, checkid);
		Order order = (Order) houseRefundService.findById(Order.class, checkid);
		CheckAllAmount checkallamount = new CheckAllAmount();
		Double cost = 0D;
		Double pay = 0D;
		//if (order.getStatus().equals(CommonConstants.OrderStatus.CheckOffAndUnout)) {
			List<Bill> bills = houseRefundService.findByProperties(Bill.class, "checkId", checkid);
			for (Bill bill : bills) {
				cost += bill.getCost();
				pay += bill.getPay();
			}
			checkallamount.setCost(cost);
			checkallamount.setPay(pay);
		//}
		JSONUtil.responseJSON(response, checkallamount);
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping("/houseCheckOutBill.do")
	public void houseCheckOutBill(HttpServletRequest request, HttpServletResponse response, CheckoutRoom checkoutroom) throws AlipayApiException {
		LoginUser loginuser = (LoginUser) request.getSession(true).getAttribute(RequestUtil.LOGIN_USER_SESSION_KEY);
		Check check = (Check) houseRefundService.findById(Check.class, checkoutroom.getCheckId());
		Order order = (Order) houseRefundService.findById(Order.class, checkoutroom.getCheckId());
		String[] source = {"1","2","3","4","5","6","7","8"};
		if(!Arrays.asList(source).contains(order.getSource())){
			JSONUtil.responseJSON(response, new AjaxResult(1, "第三方订单不可结账!"));
			return;
		}
		String branchId = check == null ? order.getBranchId() : check.getBranchId();
		String checkId = check == null ? order.getOrderId() : check.getCheckId();
		if(checkoutroom.getAmount() == null || "".equals(checkoutroom.getAmount())){
			checkoutroom.setAmount("0");
		}
		SysParam sysparam = (SysParam) houseRefundService.findOneByProperties(SysParam.class, "paramType", "PROJECT", "content", checkoutroom.getProjectid());
		if(sysparam != null){
			String project = sysparam.getParamName();
			checkoutroom.setProject(project);
		}
		Bill billNew = new Bill();
		if (!("0".equals(checkoutroom.getAmount())
				|| checkoutroom.getProjectid() == null || "".equals(checkoutroom.getProjectid()))) {
			//Bill bill = new Bill();
			String billId = DateUtil.currentDate("yyMMdd") + branchId + houseRefundService.getSequence("SEQ_NEW_BILL");
			billNew.setBillId(billId);
			billNew.setBranchId(branchId);
			billNew.setCheckId(checkId);
			billNew.setProjectId(checkoutroom.getProjectid());
			billNew.setProjectName(checkoutroom.getProject());
			billNew.setDescribe("结账");
			billNew.setCost(0.00);
			if ("2001".equals(checkoutroom.getProjectid())) {
				billNew.setPay(-Double.valueOf(checkoutroom.getAmount()));
				billNew.setPayment("1");
			} else if ("2002".equals(checkoutroom.getProjectid())) {
				billNew.setPay(Double.valueOf(checkoutroom.getAmount()));
				billNew.setPayment("1");
			} else if ("2003".equals(checkoutroom.getProjectid())) {
				billNew.setPay(Double.valueOf(checkoutroom.getAmount()));
				billNew.setPayment("2");
			} else {
				billNew.setPay(Double.valueOf(checkoutroom.getAmount()));
				billNew.setPayment("3");
			}
			billNew.setStatus("1");
			billNew.setRecordUser(loginuser.getStaff().getStaffId());
			houseRefundService.save(billNew);
		}
		Double cost = 0D;
		Double pay = 0D;
		List<Bill> bills = houseRefundService.findByProperties(Bill.class, "checkId", order.getOrderId());
		for (Bill bill : bills) {
			cost += bill.getCost();
			pay += bill.getPay();
		}
		Double money = (pay - cost) * 100;
		Double reFundMoney = PriceUtil.doubleToPriceDouble(pay - cost);
		if(money > 0){
			RefundDetail refundDetail = null;
			if(order.getGuarantee().equals("2")){
				
				List<Object> refundDetails =  houseRefundService.findBySQL("findRefundDetail", new Object[]{order.getOrderId()}, true);
				
				if(refundDetails.size() > 0){
					for(int i = 0; i < refundDetails.size(); i++){
						refundDetail = new RefundDetail();
						refundDetail.setRefundId(((Map<String, String>)refundDetails.get(i)).get("REFUND_ID").toString());
						refundDetail.setOrderId(((Map<String, String>)refundDetails.get(i)).get("ORDER_ID").toString());
						refundDetail.setBussinessId(((Map<String, String>)refundDetails.get(i)).get("BUSSINESS_ID").toString());
						refundDetail.setTradeId(((Map<String, String>)refundDetails.get(i)).get("TRADE_ID").toString());
						refundDetail.setRefundMoney(Double.parseDouble(((Map<Object, Object>)refundDetails.get(i)).get("REFUND_MONEY").toString()));
						refundDetail.setStatus(((Map<String, String>)refundDetails.get(i)).get("STATUS").toString());
						refundDetail.setSource(((Map<String, String>)refundDetails.get(i)).get("SOURCE").toString());
						
						Bill bill = null;
						
						boolean isAllReFund = false;
						
						String billId = DateUtil.currentDate("yyMMdd") + branchId + houseRefundService.getSequence("SEQ_NEW_BILL");
						if(refundDetail.getStatus().equals("1")){
							if(refundDetail.getSource().equals("7")){
								WeChatRefundResModel wechatRefund = null;
								String Smoney = String.format("%.2f", money);
								Smoney = Smoney.substring(0, Smoney.indexOf("."));
								
								String Refund = String.valueOf(refundDetail.getRefundMoney() * 100);
								Refund = Refund.substring(0, Refund.indexOf("."));
								
								WeChatRefundReqModel a = new WeChatRefundReqModel();
								a.setOutTradeNo(refundDetail.getBussinessId().trim());
								a.setTotalFee(Integer.parseInt(Refund));
								
								if(Integer.parseInt(Smoney) <= Integer.parseInt(Refund)){
									a.setRefundFee(Integer.parseInt(Smoney));
									isAllReFund = true;
								}else{
									a.setRefundFee(Integer.parseInt(Refund));
									money = money - Double.parseDouble(Refund);
									reFundMoney = PriceUtil.doubleToPriceDouble(reFundMoney - refundDetail.getRefundMoney());
								}
								
								wechatRefund = weChatPayServiceImpl.weChatRefund(a);
								if(!StringUtil.isEmpty(wechatRefund.getErrCode()) && wechatRefund.getErrCode().equals("NOTENOUGH")){
									JSONUtil.responseJSON(response, new AjaxResult(1, "结算失败!账户余额不足!"));
								}else if(wechatRefund.getResultCode().equals("SUCCESS")){
									bill = weChatPayServiceImpl.saveRefundBill(billId, order, reFundMoney, loginuser.getStaff().getStaffId());
									refundDetail.setStatus("0");
									refundDetail.setRecordTime(new Date());
									houseRefundService.save(bill);
									houseRefundService.update(refundDetail);
								}
							}
							
							if(refundDetail.getSource().equals("1")){
								int aliRefund = 0;
								
								String Refund = String.valueOf(refundDetail.getRefundMoney() * 100);
								Refund = Refund.substring(0, Refund.indexOf("."));
								
								if(money <= Double.parseDouble(Refund)){
									aliRefund = aliPayServiceImpl.alipayReFund(refundDetail.getBussinessId(), refundDetail.getTradeId(), String.valueOf(money / 100));
									isAllReFund = true;
								}else{
									aliRefund = aliPayServiceImpl.alipayReFund(refundDetail.getBussinessId(), refundDetail.getTradeId(), String.valueOf(refundDetail.getRefundMoney()));
									money = money - Double.parseDouble(Refund);
									reFundMoney = PriceUtil.doubleToPriceDouble(reFundMoney - refundDetail.getRefundMoney());
								}
								
								if(aliRefund == 1){
									bill = weChatPayServiceImpl.saveRefundBill(billId, order, reFundMoney, loginuser.getStaff().getStaffId());
									refundDetail.setStatus("0");
									refundDetail.setRecordTime(new Date());
									houseRefundService.update(refundDetail);
									houseRefundService.save(bill);
								}else{
									JSONUtil.responseJSON(response, new AjaxResult(1, "结算失败!"));
								}
							}
						}
						
						if(isAllReFund){
							if (check != null) {
								check.setStatus(CommonConstants.CheckStatus.CheckLeave);
								order.setStatus(CommonConstants.OrderStatus.CheckOff);
								houseRefundService.update(order);
								houseRefundService.update(check);
							} else {
								order.setStatus(CommonConstants.OrderStatus.Cancel);
								houseRefundService.update(order);
							}
							JSONUtil.responseJSON(response, new AjaxResult(1, "结算成功!"));
						}else{
							continue;
						}
					}
				}
			}
		} else if(money == 0){
			if (check != null) {
				check.setStatus(CommonConstants.CheckStatus.CheckLeave);
				order.setStatus(CommonConstants.OrderStatus.CheckOff);
				houseRefundService.update(order);
				houseRefundService.update(check);
			} else {
				order.setStatus(CommonConstants.OrderStatus.Cancel);
				houseRefundService.update(order);
			}
			JSONUtil.responseJSON(response, new AjaxResult(1, "结算成功!"));
		} else {
			Member member = (Member) houseRefundService.findById(Member.class, order.getOrderUser());
			MemberAccount memberAccount = (MemberAccount) houseRefundService.findOneByProperties(MemberAccount.class, "memberId", member.getMemberId());
			if(memberAccount.getCurrBalance() >= Double.parseDouble(String.valueOf(money).replace("-", ""))){
				memberAccount.setCurrBalance(memberAccount.getCurrBalance() + money);
			}else{
				memberAccount.setCurrBalance(memberAccount.getCurrBalance() + money);
				member.setStatus("0");
				member.setRemark("欠费");
			}
			if (check != null) {
				check.setStatus(CommonConstants.CheckStatus.CheckLeave);
				order.setStatus(CommonConstants.OrderStatus.CheckOff);
				houseRefundService.update(order);
				houseRefundService.update(check);
			} else {
				order.setStatus(CommonConstants.OrderStatus.Cancel);
				houseRefundService.update(order);
			}
			houseRefundService.update(member);
			houseRefundService.update(memberAccount);
			JSONUtil.responseJSON(response, new AjaxResult(1, "结算成功!"));
		}
	}
	
	@RequestMapping("/changeOrderAutorefund.do")
	public void changeAutorefund(HttpServletRequest request,
			HttpServletResponse response, String orderId,String status) {
		Order order = (Order) houseRefundService.findById(Order.class, orderId);
		order.setAutoRefund(status);
		
		try{
			houseRefundService.update(order);
			JSONUtil.responseJSON(response, new AjaxResult(1, "修改成功!"));
		}catch (Exception e) {
			e.printStackTrace();
			JSONUtil.responseJSON(response, new AjaxResult(2, "修改失败!"));
		}
	}
	
	@RequestMapping("/houseOrderoff.do")
	public void checkroompayoff(HttpServletRequest request, HttpServletResponse response, String checkid) {
		Check check = (Check) houseRefundService.findOneByProperties(Check.class, "checkId", checkid);
		Order order = (Order) houseRefundService.findById(Order.class, checkid);
		String status = check == null ? order.getStatus() : check.getStatus();
		if (check != null) {
			if ("2".equalsIgnoreCase(check.getStatus())) {
				JSONUtil.responseJSON(response, new AjaxResult(0, "当前已结算!"));
			} else {
				JSONUtil.responseJSON(response, new AjaxResult(1, "可以结算!"));
			}
		} else if ("4".equalsIgnoreCase(status)) {
			JSONUtil.responseJSON(response, new AjaxResult(0, "当前已结算!"));
		} else {
			JSONUtil.responseJSON(response, new AjaxResult(1, "可以结算!"));
		}
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping("/houseloadroommapping.do")
	public void loadroommapping(HttpServletRequest request, HttpServletResponse response, String checkid) {
		LoginUser loginuser = (LoginUser) request.getSession(true).getAttribute(RequestUtil.LOGIN_USER_SESSION_KEY);
		Staff staff = loginuser.getStaff();
		String branchId = staff.getBranchId();
		Check check = (Check) houseRefundService.findOneByProperties(Check.class, "checkId", checkid);
		Order order = (Order) houseRefundService.findById(Order.class, checkid);
		String roomid = check == null ? order.getRoomId() : check.getRoomId();
		RoomMapping roommapping = (RoomMapping) houseRefundService.findOneByProperties(RoomMapping.class, "relaRoomid", roomid);
		List<Map<String, String>> result = new ArrayList<Map<String, String>>();
		if(roommapping != null){
			String sql = "loadroommapping";
			result = houseRefundService.findBySQL(sql, new String[] { branchId, roommapping.getRoomId() }, true);
		}
		JSONUtil.responseJSON(response, result);
	}
	
	
	//添加账单
	@RequestMapping("/addbillInhouse.do")
	public void add_bill(HttpServletRequest request, HttpServletResponse response, String checkId, String project,
			String projectid, String amount, String remark) {
		LoginUser loginuser = (LoginUser) request.getSession(true).getAttribute(RequestUtil.LOGIN_USER_SESSION_KEY);
		Staff staff = loginuser.getStaff();
		String branchid = "";
		Bill bill = new Bill();
		Check check = (Check) houseRefundService.findOneByProperties(Check.class, "checkId", checkId);
		Order order = (Order) houseRefundService.findOneByProperties(Order.class, "orderId", checkId);
		String source = order.getSource();
		branchid = check == null ? order.getBranchId() : check.getBranchId();
		String billId = DateUtil.currentDate("yyMMdd") + branchid + source + houseRefundService.getSequence("SEQ_NEW_BILL");
		bill.setBillId(billId);
		bill.setBranchId(branchid);
		bill.setCheckId(checkId);
		bill.setDescribe("入账");
		RoomUtil.setBillPayment(bill, projectid, Double.valueOf(amount));
		bill.setStatus(CommonConstants.BillStatus.BillNormal);
		bill.setRemark(remark);
		bill.setRecordUser(staff.getStaffId());

		Recording recording = new Recording();
		String recordId = DateUtil.currentDate("yyMMdd") + branchid + houseRefundService.getSequence("SEQ_NEW_RECORDING");
		recording.setRecordId(recordId);
		recording.setBranchId(branchid);
		recording.setCheckId(checkId);
		recording.setRecordType(CommonConstants.BillrecordingType.billType);
		recording.setProjectId(projectid);
		recording.setFee(Double.valueOf(amount));
		recording.setRecordUser(staff.getStaffId());

		try {
			houseRefundService.save(bill);
			houseRefundService.save(recording);
			JSONUtil.responseJSON(response, new AjaxResult(CommonConstants.AJAXRESULT.SUCESS, "入账成功!"));
		} catch (Exception e) {
			e.printStackTrace();
			JSONUtil.responseJSON(response, new AjaxResult(CommonConstants.AJAXRESULT.FALSE, "入账失败!"));
		}
	}
	
	
	@RequestMapping("/loadHouseBillDataInHouse.do")
	public void loadHouseBillDataInHouse(HttpServletRequest request, HttpServletResponse  response, String checkid, String status) {
		String branchid = "";
		Check check = (Check) houseRefundService.findOneByProperties(Check.class, "checkId", checkid);
		Order order = (Order) houseRefundService.findOneByProperties(Order.class, "orderId", checkid);
		branchid = check == null ? order.getBranchId() : check.getBranchId();
		String sql = "loadroomlistbill";
		List<?> alllist = houseRefundService.findBySQL(sql, new String[] { checkid, null}, true);
		List<?> normallist = houseRefundService.findBySQL(sql, new String[] { checkid,
				CommonConstants.BillStatus.BillNormal }, true);
		/*List<String> liststatus = new ArrayList<String>();
		liststatus.add("1");
		liststatus.add("4");*/
		List<?> list = houseRefundService.findBillBySqlInHouse(checkid, null, status);
		if (alllist.size() <= normallist.size()) {
			JSONUtil.responseJSON(response, new AjaxResult(CommonConstants.AJAXRESULT.FALSE, 
					"账单无冲减/转账/结账记录!", list));
		} else {
			JSONUtil.responseJSON(response, new AjaxResult(CommonConstants.AJAXRESULT.SUCESS, 
					"", list));
		}
	}
	/*
	 * 民宿冲减
	 */
	@RequestMapping("/consumptionhouse.do")
	@RightMethodControl( rightType = RightConstants.RightType.CON_BILL )
	public void consumptionhouse(HttpServletRequest request, HttpServletResponse response, 
			String strbillid, String offset, String checkid) {
		LoginUser loginuser = (LoginUser) request.getSession(true).getAttribute(RequestUtil.LOGIN_USER_SESSION_KEY);
		Check check = (Check) houseRefundService.findById(Check.class, checkid);
		Staff staff = loginuser.getStaff();
		String[] arrbill = strbillid.split(",");
		boolean errorbillflag = true;
		for (String billid : arrbill) {
			Bill bill = (Bill) houseRefundService.findOneByProperties(Bill.class, "billId", billid);
			String projectid = bill.getProjectId();
			/*if (projectid.startsWith("2")) {
				double price = bill.getPay();
				if (price == 0) {
					errorbillflag = false;
				}
			} else {
				double price = bill.getCost();
				if (price == 0) {
					errorbillflag = false;
				}
				
			}*/
			double pricep = bill.getPay();
			double pricec = bill.getCost();
			if(pricec <= 0 && pricep <= 0){
				errorbillflag = false;
			}
			if(pricec > 0 && pricep > 0){
				errorbillflag = false;
			}
		}
		
		if (!errorbillflag) {
			JSONUtil.responseJSON(response, new AjaxResult(CommonConstants.AJAXRESULT.FALSE, "选中了错误的冲减金额!"));
			return;
		}

		for (String billid : arrbill) {
			Bill consumebill = new Bill();
			Bill bill = (Bill) houseRefundService.findOneByProperties(Bill.class, "billId", billid);
			String billId = DateUtil.currentDate("yyMMdd") + check.getBranchId()
					+ houseRefundService.getSequence("SEQ_NEW_BILL");
			consumebill.setBillId(billId);
			consumebill.setBranchId(check.getBranchId());
			consumebill.setCheckId(bill.getCheckId());
			consumebill.setDescribe(bill.getDescribe());
			consumebill.setOffset(offset);
			consumebill.setPayment(bill.getPayment());
			consumebill.setProjectId(bill.getProjectId());
			consumebill.setProjectName(bill.getProjectName());
			consumebill.setRecordUser(staff.getStaffId());
			consumebill.setRemark(bill.getBillId());
			consumebill.setStatus(CommonConstants.BillStatus.BillCONSUME);

			String projectid = bill.getProjectId();
			// 记日志
			OffsetLog otlog = new OffsetLog();
			String logid = DateUtil.currentDate("yyMMdd") + check.getBranchId()
					+ houseRefundService.getSequence("SEQ_OFFSETLOG_ID");
			otlog.setLogId(logid);
			otlog.setBranchId(check.getBranchId());
			otlog.setCheckId(bill.getCheckId());
			otlog.setLastBillId(bill.getBillId());
			otlog.setCurrBillId(consumebill.getBillId());
			otlog.setRecordUser(staff.getStaffId());
			otlog.setRecordTime(new Date());
			otlog.setOffsetType("1");
			otlog.setRemark(offset);
			
			double pricep = bill.getPay();
			if(pricep > 0){
				consumebill.setPay(-pricep);
				consumebill.setCost(0.00);
				otlog.setOffsetFee(bill.getPay());// 记冲减金额
			}
			double pricec = bill.getCost();
			if(pricec > 0){
				consumebill.setCost(-pricec);
				consumebill.setPay(0.00);
				otlog.setOffsetFee(bill.getCost()); // 记冲减金额					
			}
			bill.setStatus(CommonConstants.BillStatus.BillCONSUME);

			try {
				houseRefundService.save(consumebill);
				houseRefundService.save(bill);
				houseRefundService.save(otlog);// 记冲减日志
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		JSONUtil.responseJSON(response, new AjaxResult(CommonConstants.AJAXRESULT.SUCESS, "冲减金额成功!"));

	}
	
	
	@RequestMapping("/loadHouseBillData.do")
	public void loadhouselistbill(HttpServletRequest request, HttpServletResponse  response, String checkid, String status) {
		String branchid = "";
		Check check = (Check) houseRefundService.findOneByProperties(Check.class, "checkId", checkid);
		Order order = (Order) houseRefundService.findOneByProperties(Order.class, "orderId", checkid);
		branchid = check == null ? order.getBranchId() : check.getBranchId();
		String sql = "loadroomlistbill";
		List<?> alllist = houseRefundService.findBySQL(sql, new String[] { checkid, null}, true);
		List<?> normallist = houseRefundService.findBySQL(sql, new String[] { checkid,
				CommonConstants.BillStatus.BillNormal }, true);
		/*List<String> liststatus = new ArrayList<String>();
		liststatus.add("1");
		liststatus.add("4");*/
		List<?> list = houseRefundService.findBillBySql(checkid, null, status);
		if (alllist.size() <= normallist.size()) {
			JSONUtil.responseJSON(response, new AjaxResult(CommonConstants.AJAXRESULT.FALSE, 
					"账单无冲减/转账/结账记录!", list));
		} else {
			JSONUtil.responseJSON(response, new AjaxResult(CommonConstants.AJAXRESULT.SUCESS, 
					"", list));
		}
	}
	
	@RequestMapping("/loadHouseCheckData.do")
	public void loadHouseCheckData(HttpServletRequest request, HttpServletResponse response, MultiQueryCheck multiQuerycheck) {
		//Check check = (Check) houseRefundService.findById(Check.class, multiQuerycheck.getCheckid());
		Order order = (Order) houseRefundService.findById(Order.class, multiQuerycheck.getCheckid());
		JSONUtil.responseJSON(response, order);
	}
}
