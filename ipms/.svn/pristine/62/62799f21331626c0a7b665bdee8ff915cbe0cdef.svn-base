package com.ideassoft.apartment.controller;

import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.ideassoft.apartment.service.ApartmentOrderService;
import com.ideassoft.apartment.service.ApartmentWeChatPayServiceImpl;
import com.ideassoft.bean.Aptorder;
import com.ideassoft.bean.Bill;
import com.ideassoft.bean.RefundDetail;
import com.ideassoft.core.ajax.AjaxResult;
import com.ideassoft.core.bean.LoginUser;
import com.ideassoft.core.constants.CommonConstants;
import com.ideassoft.core.jdbc.SqlBuilder;
import com.ideassoft.core.page.Pagination;
import com.ideassoft.util.JSONUtil;
import com.ideassoft.util.RequestUtil;
import com.ideassoft.wechatrefund.WeChatRefundReqModel;

@Transactional
@Controller
public class ApartmentOrderController {

	@Autowired
	private ApartmentOrderService apartmentOrderService;
	
	@Autowired
	private ApartmentWeChatPayServiceImpl weChatPayServiceImpl;
	
//	@Autowired
//	private AliPayServiceImpl aliPayServiceImpl;
	
	@RequestMapping("ApartmentOrderAll.do")
	public ModelAndView apartmentOrderAll(HttpServletRequest request,HttpServletResponse response) throws Exception {
		LoginUser loginUser = (LoginUser) request.getSession(true).getAttribute(RequestUtil.LOGIN_USER_SESSION_KEY);
		ModelAndView mv = new ModelAndView();
		String arrivaltime = request.getParameter("arrivaltime");
		String memberName = request.getParameter("memberName");
		String mobile = request.getParameter("mobile");
		Pagination pagination = SqlBuilder.buildPagination(request);
		List<?> list = apartmentOrderService.findBySQLWithPagination("queryAptOrder", new String[] { loginUser.getStaff().getBranchId(), "", memberName, mobile, arrivaltime }, pagination, true);
		mv.addObject("list", list);
		mv.addObject("pagination", pagination);
		mv.addObject("memberName", memberName);
		mv.addObject("mobile", mobile);
		mv.addObject("action", "ApartmentOrderAll.do");
		mv.setViewName("page/apartment/apartmentmainmenu/apartmentorder/apartmentorderall");
		return mv;
	}
	
	@RequestMapping("ApartmentNewOrder.do")
	public ModelAndView apartmentNewOrder(HttpServletRequest request,HttpServletResponse response) throws Exception {
		LoginUser loginUser = (LoginUser) request.getSession(true).getAttribute(RequestUtil.LOGIN_USER_SESSION_KEY);
		ModelAndView mv = new ModelAndView();
		String arrivaltime = request.getParameter("arrivaltime");
		String memberName = request.getParameter("memberName");
		String mobile = request.getParameter("mobile");
		Pagination pagination = SqlBuilder.buildPagination(request);
		List<?> list = apartmentOrderService.findBySQLWithPagination("queryAptOrderTwo", new String[] { loginUser.getStaff().getBranchId(), memberName, mobile, arrivaltime }, pagination, true);
		mv.addObject("list", list);
		mv.addObject("pagination", pagination);
		mv.addObject("memberName", memberName);
		mv.addObject("mobile", mobile);
		mv.addObject("action", "ApartmentNewOrder.do");
		mv.setViewName("page/apartment/apartmentmainmenu/apartmentorder/apartmentorderall");
		return mv;
	}
	
	@RequestMapping("ApartmentOrderCancel.do")
	public ModelAndView apartmentOrderCancel(HttpServletRequest request,HttpServletResponse response) throws Exception {
		LoginUser loginUser = (LoginUser) request.getSession(true).getAttribute(RequestUtil.LOGIN_USER_SESSION_KEY);
		ModelAndView mv = new ModelAndView();
		String arrivaltime = request.getParameter("arrivaltime");
		String memberName = request.getParameter("memberName");
		String mobile = request.getParameter("mobile");
		Pagination pagination = SqlBuilder.buildPagination(request);
		List<?> list = apartmentOrderService.findBySQLWithPagination("queryAptOrder", new String[] { loginUser.getStaff().getBranchId(), "0", memberName, mobile, arrivaltime }, pagination, true);
		mv.addObject("list", list);
		mv.addObject("pagination", pagination);
		mv.addObject("memberName", memberName);
		mv.addObject("mobile", mobile);
		mv.addObject("action", "ApartmentOrderCancel.do");
		mv.setViewName("page/apartment/apartmentmainmenu/apartmentorder/apartmentorderall");
		return mv;
	}
	
	@RequestMapping("lookRoomWithNobody.do")
	public ModelAndView lookRoomWithNobody(HttpServletRequest request,HttpServletResponse response) throws Exception {
		LoginUser loginUser = (LoginUser) request.getSession(true).getAttribute(RequestUtil.LOGIN_USER_SESSION_KEY);
		ModelAndView mv = new ModelAndView();
		String arrivaltime = request.getParameter("arrivaltime");
		String memberName = request.getParameter("memberName");
		String mobile = request.getParameter("mobile");
		Pagination pagination = SqlBuilder.buildPagination(request);
		List<?> list = apartmentOrderService.findBySQLWithPagination("queryAptOrder", new String[] { loginUser.getStaff().getBranchId(), "1", memberName, mobile, arrivaltime }, pagination, true);
		mv.addObject("list", list);
		mv.addObject("pagination", pagination);
		mv.addObject("memberName", memberName);
		mv.addObject("mobile", mobile);
		mv.addObject("action", "lookRoomWithNobody.do");
		mv.addObject("type","3");
		mv.setViewName("page/apartment/apartmentmainmenu/apartmentorder/apartmentorderall");
		return mv;
	}
	
	@RequestMapping("/aptOrderReFund.do")
	public void aptOrderReFund(HttpServletRequest request, HttpServletResponse response, String aptOrderId) {
		Aptorder aptOrder = (Aptorder) apartmentOrderService.findById(Aptorder.class, aptOrderId);
		aptOrder.setReFundTime(new Date());
		aptOrder.setStatus(CommonConstants.OrderStatus.Cancel);
		try{
			RefundDetail refundDetail = (RefundDetail) apartmentOrderService.findOneByProperties(RefundDetail.class, "orderId", aptOrderId);
			if(refundDetail != null && refundDetail.getStatus().equals("1")){
				Bill bill = (Bill) apartmentOrderService.findOneByProperties(Bill.class, "branchId", aptOrder.getBranchId(), "checkId", aptOrder.getOrderId() ,"projectId", "2004");
				if(refundDetail.getSource().equals("7")){
					String Refund = String.valueOf(refundDetail.getRefundMoney() * 100);
					Refund = Refund.substring(0, Refund.indexOf("."));
					String money = String.valueOf(bill.getPay() * 100);
					money = money.substring(0, money.indexOf("."));
					WeChatRefundReqModel a = new WeChatRefundReqModel();
					a.setOutTradeNo(refundDetail.getBussinessId().trim());
					a.setTotalFee(Integer.parseInt(Refund));
					a.setRefundFee(Integer.parseInt(money));
					weChatPayServiceImpl.weChatRefund(a);
				}
				if(refundDetail.getSource().equals("1")){
			//		aliPayServiceImpl.alipayReFund(refundDetail.getBussinessId(), refundDetail.getTradeId(), String.valueOf(bill.getPay()));
				}
				refundDetail.setStatus("0");
				apartmentOrderService.update(refundDetail);
			}
			apartmentOrderService.update(aptOrder);
			JSONUtil.responseJSON(response, new AjaxResult(1, "退款成功!"));
		}catch (Exception e) {
			e.printStackTrace();
			JSONUtil.responseJSON(response, new AjaxResult(2, "退款失败!"));
		}
	}
}
