package com.ideassoft.basic.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;
import org.springframework.web.servlet.ModelAndView;

import com.ideassoft.basic.service.GoodsBasicService;
import com.ideassoft.bean.Goods;
import com.ideassoft.bean.GoodsCategory;
import com.ideassoft.core.ajax.AjaxResult;
import com.ideassoft.core.constants.CommonConstants;
import com.ideassoft.util.JSONUtil;
import com.ideassoft.util.RequestUtil;

@Controller
public class GoodsManageCtrl {
	
	@Autowired
	private GoodsBasicService goodsService;
	
	
	@RequestMapping("/addGoodsPicMark.do")
	public ModelAndView addGoodsPicMark(HttpServletRequest request) throws Exception {
		ModelAndView mv = new ModelAndView("page/basic/goods/loadCityPicMark");//
		
		String CATEGORYID = request.getParameter("CATEGORYID");
		GoodsCategory gc = (GoodsCategory) goodsService.findOneByProperties(GoodsCategory.class, "status", "1", "categoryId", CATEGORYID);
		String url = "";
		if (gc.getPicture() != null) {
		    url = CommonConstants.Domain.DOMAINNAME + gc.getPicture();
		}
		mv.addObject("CATEGORYID", CATEGORYID);
		mv.addObject("url", url);
		return mv;
	}
	
	
	@RequestMapping("/addNewCityPictureMark.do")
	@SuppressWarnings("unchecked")
	public void addNewCityPictureMark(HttpServletRequest request, HttpServletResponse response) throws Exception {
		String fileName = null;
		FileOutputStream fos = null;
		InputStream is = null;
		//MultipartFile srcFile = multipartRequest.getFile("file");
        CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(request.getSession().getServletContext());
        if(multipartResolver.isMultipart(request)){
        	  MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request;
              String CATEGORYID = multiRequest.getParameter("CATEGORYID");
      		Iterator<String> iter = multiRequest.getFileNames();
    		while(iter.hasNext()){
    			 List<MultipartFile> list = multiRequest.getFiles(iter.next());
    			 for(MultipartFile file : list){
    				   String myFileName = file.getOriginalFilename();
    				   if(myFileName != null && !"".equals(myFileName)){
    					 
    					   try{
    					   
    						String webPath = RequestUtil.getWebPath(request);
    						 
    							fileName = file.getOriginalFilename();
    							fileName = new Date().getTime() +fileName.substring(fileName.lastIndexOf("."));
    					 
    						File srcFolder = new File(webPath + File.separator + "upload");
    						if (!srcFolder.exists()) {
    							srcFolder.mkdirs();
    						}
    						File tarFile = new File(srcFolder.getAbsolutePath() + File.separator + fileName);
    						if (!tarFile.exists()) {
    							tarFile.createNewFile();
    						}
    						fos = new FileOutputStream(tarFile);
    						is = file.getInputStream();
    						int ln = 0;
    						byte[] buf = new byte[1024];
    						while ((ln = is.read(buf)) != -1) {
    							fos.write(buf, 0, ln);
    						}
    						fos.flush();
    					} catch (IOException e) {
    						e.printStackTrace();
    					} finally {
    						if (fos != null) {
    							fos.close();
    						}
    						if (is != null) {
    							is.close();
    						}
    					}
    				
    					   
    					   if(fileName != null && !"".equals(fileName) ){
    							GoodsCategory gc = (GoodsCategory) goodsService.findOneByProperties(GoodsCategory.class, "status", "1", "categoryId", CATEGORYID);
    							if (gc!= null ) {
    								gc.setPicture(fileName);
    								goodsService.update(gc);
    							}
    					   }
    					
    					
    			 }
    			 }
    					
    				   }
    		
    		JSONUtil.responseJSON(response, new AjaxResult(1, "操作成功!"));
    		
    			 }
    		}
	
	
	@RequestMapping("/addGoodsPic.do")
	@SuppressWarnings("unchecked")
	public ModelAndView addGoodsPic(HttpServletRequest request) throws Exception {
		ModelAndView mv = new ModelAndView("page/basic/goods/loadCityPic");
		
		String adminiCode = request.getParameter("adminiCode");
		Goods goods = (Goods) goodsService.findOneByProperties(Goods.class, "status", "1", "goodsId", adminiCode);
		
		List pictures = new ArrayList();
		if (goods.getPicture() != null) {
			String[] picturesArray = goods.getPicture().split(",");
			for (int i = 0; i < picturesArray.length; i++) {
				//Picture pic = (Picture) manageService.findOneByProperties(Picture.class, "status", "1", "adminiCode", adminiCode);
				//pictures.add(picturesArray[i]);
				String url = CommonConstants.Domain.DOMAINNAME + picturesArray[i];
				pictures.add(url);
				
				
			}
		}
		mv.addObject("operateType", "goodspic");
		mv.addObject("pic_str", goods.getPicture());
		mv.addObject("adminiCode", adminiCode);
		mv.addObject("cityInfo", goods);
		mv.addObject("pictures", pictures);
		return mv;
	}
	
	
	
}
