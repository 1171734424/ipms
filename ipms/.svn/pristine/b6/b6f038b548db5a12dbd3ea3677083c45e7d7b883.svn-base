package com.ideassoft.basic.controller;


import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import com.ideassoft.basic.service.CityBasicService;
import com.ideassoft.bean.City;
import com.ideassoft.bean.Staff;
import com.ideassoft.core.ajax.AjaxResult;
import com.ideassoft.core.bean.LoginUser;
import com.ideassoft.core.constants.CommonConstants;
import com.ideassoft.util.ChineseCharacterUtil;
import com.ideassoft.util.JSONUtil;
import com.ideassoft.util.RequestUtil;



@Transactional
@Controller
public class CityCtrl {
	@Autowired
	private CityBasicService cityBasicService;
	
	
	/**
	 *  城市添加页面跳转
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("/addCity.do")
	public ModelAndView addCity(HttpServletRequest request, HttpServletResponse response) throws Exception {
		ModelAndView mv = new ModelAndView("page/basic/city/addCity");
		return mv;
	}
	
	/**
	 *  城市编辑页面跳转
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("/editCity.do")
	public ModelAndView editCity(HttpServletRequest request, HttpServletResponse response) throws Exception {
		ModelAndView mv = new ModelAndView("page/basic/city/editCity");
		String adminiCode = request.getParameter("adminiCode");
		City city = (City) cityBasicService.findOneByProperties(City.class, "adminiCode", adminiCode);
		String cityCode = adminiCode.substring(0, 4) + "00000000";
		String districtCode = adminiCode.substring(0, 6) + "000000";
		City cityName = (City) cityBasicService.findOneByProperties(City.class, "adminiCode", cityCode, "rank", "1");
		City districtName = new City();
		
		if (!city.getRank().equals("2") && !city.getRank().equals("1")&& !city.getRank().equals("7")&& !city.getRank().equals("8")) {
			districtName = (City) cityBasicService.findOneByProperties(City.class, "adminiCode", districtCode, "rank", "2");
		}
		if(city.getRank().equals("8")){
			districtName = (City) cityBasicService.findOneByProperties(City.class, "adminiCode", districtCode, "rank", "7");
		}
		mv.addObject("adminiCode",adminiCode);
		mv.addObject("adminiName",city.getAdminiName());
		if(!city.getRank().equals("8")){
			mv.addObject("districtName", districtName.getAdminiName() == null ? "" : districtName.getAdminiName());
		}else{
			mv.addObject("districtName", "");
		}
		mv.addObject("subwayLineName", districtName.getAdminiName() == null ? "" : districtName.getAdminiName());
		mv.addObject("cityName", cityName.getAdminiName());
		mv.addObject("orderNumber",city.getOrderNumber());
		mv.addObject("rank",city.getRank());
        mv.addObject("status",city.getStatus());
        if(city.getRemark() != null){
        	 mv.addObject("remark",String.valueOf(city.getRemark().charAt(2)));
        }else{
        	mv.addObject("remark","0");
        }
        mv.addObject("recordUser",city.getRecordUser());
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        mv.addObject("recordTime",sdf.format(city.getRecordTime()));
		return mv;
	}
	
	/**
	 * 提交新增城市
	 * @param request
	 * @param response
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("/submitAddCity.do")
	public void submitAddCity(HttpServletRequest request, HttpServletResponse response) throws Exception {
		String city = request.getParameter("city");
		String rank = request.getParameter("rank");
		
		String adminiName = request.getParameter("adminiName");
		String district = request.getParameter("district");
		String subwayLine = request.getParameter("subwayLine");
		String adminiCode = "";
		String id = "";
		if (rank.equals("2")) {
			id = getSeq(city.substring(0, 4),"district",rank,2);
			adminiCode = city.substring(0, 4) + id + "000000";
		} else if (rank.equals("3")) {
			id = getSeq(district.substring(0, 6),"street",rank,3);
			adminiCode = district.substring(0, 6) + id + "000";
		}  else if (rank.equals("4")) {
			id = getSeq(district.substring(0, 6),"business",rank,3);
			adminiCode = district.substring(0, 6) + id + "000";
		} else if (rank.equals("5")) {
			id = getSeq(district.substring(0, 6),"school",rank,3);
			adminiCode = district.substring(0, 6) + id + "000";
		} else if (rank.equals("6")) {
			id = getSeq(district.substring(0, 6),"scence",rank,3);
			adminiCode = district.substring(0, 6) + id + "000";
		} else if (rank.equals("7")) {
			id = getSeq(city.substring(0, 4),"subwayLine",rank,2);
			adminiCode = city.substring(0, 4) + id + "000000";
		} else if (rank.equals("8")) {
			id = getSeq(subwayLine.substring(0, 6),"subwayStation",rank,6);
			adminiCode = subwayLine.substring(0, 6) + id;
		} 
		if("outof".equals(id)){
			JSONUtil.responseJSON(response, new AjaxResult(3, "区的数量已超上线"));
			return;
		}else if("param is error".equals(id) || id == ""){
			JSONUtil.responseJSON(response, new AjaxResult(0, "添加失败"));
			return;
		}
		City cityInfo = new City();
		cityInfo.setAdminiCode(adminiCode);
		cityInfo.setAdminiName(adminiName);
		cityInfo.setRank(rank);
		cityInfo.setRecordTime(new Date());
		cityInfo.setStatus("1");
		LoginUser loginUser = (LoginUser) request.getSession(true).getAttribute(RequestUtil.LOGIN_USER_SESSION_KEY);
		Staff staff = loginUser.getStaff();
		String recordUser = staff.getStaffId();
		cityInfo.setRecordUser(recordUser);
		try {
			cityBasicService.getHibernateTemplate().saveOrUpdate(cityInfo);
			JSONUtil.responseJSON(response, new AjaxResult(1, "添加成功"));
		} catch (Exception e) {
			JSONUtil.responseJSON(response, new AjaxResult(0, "添加失败"));
		}
	}
	
	
	//选择所属城市
	@RequestMapping("/cityDialog.do")
	public ModelAndView cityDialog(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("page/dialog/cityDialog");
		mv.addObject("dialogColumns", "adminiCode,adminiName");
		mv.addObject("dialogTarget", "City");
		mv.addObject("dialogConditions", "rank = '1' and status = '1'");
		mv.addObject("dialogQuickAdd", null);
		mv.addObject("selectType", "dialog");
		mv.addObject("colName", "city");
		return mv;
	}
	
	
	//选择所属区域
	@RequestMapping("/districtDialog.do")
	public ModelAndView districtDialog(HttpServletRequest request, HttpServletResponse response, String event) {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("page/dialog/districtDialog");
		mv.addObject("dialogColumns", "adminiCode,adminiName");
		mv.addObject("dialogTarget", "City");
		mv.addObject("dialogConditions", "rank = '2' and status = '1' ");
		mv.addObject("dataEvent", "adminiCode:CITY;STARTWITH:4");
		mv.addObject("event", event);
		mv.addObject("dialogQuickAdd", null);
		mv.addObject("selectType", "dialog");
		mv.addObject("colName", "district");
		return mv;
	}
	
	
	//选择所属地铁线
	@RequestMapping("/subwayLineDialog.do")
	public ModelAndView subwayLineDialog(HttpServletRequest request, HttpServletResponse response, String event) {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("page/dialog/subwayLineDialog");
		mv.addObject("dialogColumns", "adminiCode,adminiName");
		mv.addObject("dialogTarget", "City");
		mv.addObject("dialogConditions", "rank = '7' and status = '1' ");
		mv.addObject("dataEvent", "adminiCode:CITY;STARTWITH:4");
		mv.addObject("event", event);
		mv.addObject("dialogQuickAdd", null);
		mv.addObject("selectType", "dialog");
		mv.addObject("colName", "subwayLine");
		return mv;
	}
	
	
	/**
	 * 提交编辑过后的城市
	 * @param request
	 * @param response
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("/submitEditCity.do")
	public void submitEditCity(HttpServletRequest request, HttpServletResponse response) throws Exception {
		String fileName = null;
		FileOutputStream fos = null;
		InputStream is = null;
		String headPicUrl = "";
		MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
		MultipartFile srcFile = multipartRequest.getFile("file");
		
		if(null != srcFile){
			try {
				String webPath = RequestUtil.getWebPath(request);
				if (StringUtils.isEmpty(fileName)) {
					fileName = srcFile.getOriginalFilename();
					fileName = new Date().getTime()+fileName.substring(fileName.lastIndexOf("."));
				}
				File srcFolder = new File(webPath + File.separator + "upload");
				if (!srcFolder.exists()) {
					srcFolder.mkdirs();
				}
				headPicUrl = CommonConstants.Domain.DOMAINNAME + fileName;
				File tarFile = new File(srcFolder.getAbsolutePath() + File.separator + fileName);
				if (!tarFile.exists()) {
					tarFile.createNewFile();
				}
				fos = new FileOutputStream(tarFile);
				is = srcFile.getInputStream();
				int ln = 0;
				byte[] buf = new byte[1024];
				while ((ln = is.read(buf)) != -1) {
					fos.write(buf, 0, ln);
				}
				fos.flush();
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
				if (fos != null) {
					fos.close();
				}
				if (is != null) {
					is.close();
				}
			}
		}
		String adminiCode = request.getParameter("adminiCode");
		String adminiName = request.getParameter("adminiName");
		String rank = request.getParameter("rank");
		String orderNumber = request.getParameter("orderNumber");
		String status = request.getParameter("status");
		String hot = request.getParameter("hot");
		List<City> cityByOrder = cityBasicService.findByProperties(City.class, "orderNumber", orderNumber);
		if(cityByOrder.size() == 1){
			if(cityByOrder.get(0).getOrderNumber().equals(orderNumber)){
				City city = (City) cityBasicService.findOneByProperties(City.class, "adminiCode", adminiCode);
				city.setAdminiName(adminiName);
				city.setOrderNumber(orderNumber);
				city.setRank(rank);
				city.setRecordTime(new Date());
				city.setStatus(status);
				city.setCityPicture(null != srcFile ? headPicUrl : city.getCityPicture());
				city.setRemark(String.valueOf(ChineseCharacterUtil.convertHanzi2Pinyin(adminiName).charAt(0)).toLowerCase() + "#" + hot);
				LoginUser loginUser = (LoginUser) request.getSession(true).getAttribute(RequestUtil.LOGIN_USER_SESSION_KEY);
				Staff staff = loginUser.getStaff();
				String recordUser = staff.getStaffId();
				city.setRecordUser(recordUser);
				try {
					cityBasicService.getHibernateTemplate().saveOrUpdate(city);
					JSONUtil.responseJSON(response, new AjaxResult(1, "编辑成功"));
				} catch (Exception e) {
					JSONUtil.responseJSON(response, new AjaxResult(0, "编辑失败"));
				}
			}else{
				JSONUtil.responseJSON(response, new AjaxResult(-1, "推荐排序已存在"));
			}
			
		}else if(cityByOrder.size() > 1){
			JSONUtil.responseJSON(response, new AjaxResult(3, "相同推荐排序存在多个"));
		}else{
			City city = (City) cityBasicService.findOneByProperties(City.class, "adminiCode", adminiCode);
			city.setAdminiName(adminiName);
			city.setOrderNumber(orderNumber);
			city.setRank(rank);
			city.setRecordTime(new Date());
			city.setStatus(status);
			city.setCityPicture(null != srcFile ? headPicUrl : city.getCityPicture());
			city.setRemark(String.valueOf(ChineseCharacterUtil.convertHanzi2Pinyin(adminiName).charAt(0)).toLowerCase() + "#" + hot);
			LoginUser loginUser = (LoginUser) request.getSession(true).getAttribute(RequestUtil.LOGIN_USER_SESSION_KEY);
			Staff staff = loginUser.getStaff();
			String recordUser = staff.getStaffId();
			city.setRecordUser(recordUser);
			try {
				cityBasicService.getHibernateTemplate().saveOrUpdate(city);
				JSONUtil.responseJSON(response, new AjaxResult(1, "编辑成功"));
			} catch (Exception e) {
				JSONUtil.responseJSON(response, new AjaxResult(0, "编辑失败"));
			}
			
			
		}
		
	}
	
	
	/**
	 * 获取城市区、街区、景点、地铁线等人工序列
	 * district区，subwayLine地铁线，street街道，business商业圈，school学校，scence景区，subwayStation地铁站
	 * @throws Exception 
	 */
	public String getSeq(String cityCode,String param,String rank,int length ) throws Exception{
		if("district".equals(param)){
			int num = 1;
			List<?> list = cityBasicService.queryDistrictMaxSeq(cityCode, rank);
			if(((Map<?, ?>) list.get(0)).get("MAX") != null){
				String maxWhole = ((Map<?, ?>) list.get(0)).get("MAX").toString();
				String max = maxWhole.substring(4,6);
				num = Integer.parseInt(max) + 1;
			}
			if(num > 50){
				return "outof";//代表超过序列
			}
			return String.format("%0"+length+"d", num);
		}else if("subwayLine".equals(param)){
			int num = 51;
			//查询地铁线和查询城市区是一个方法，只是rank不一样
			List<?> list = cityBasicService.queryDistrictMaxSeq(cityCode, rank);
			if(((Map<?, ?>) list.get(0)).get("MAX") != null){
				String maxWhole = ((Map<?, ?>) list.get(0)).get("MAX").toString();
				String max = maxWhole.substring(4,6);
				num = Integer.parseInt(max) + 1;
			}
			if(num > 99){
				return "outof";//代表超过序列
			}
			return String.format("%0"+length+"d", num);
		}else if("street".equals(param)){
			int num = 101;
			//查询街区和查询城市区是一个方法，只是rank和code不一样
			List<?> list = cityBasicService.queryDistrictMaxSeq(cityCode, rank);
			if(((Map<?, ?>) list.get(0)).get("MAX") != null){
				String maxWhole = ((Map<?, ?>) list.get(0)).get("MAX").toString();
				String max = maxWhole.substring(6,9);
				num = Integer.parseInt(max) + 1;
			}
			if(num > 199){
				return "outof";//代表超过序列
			}
			return String.format("%0"+length+"d", num);
		}else if("business".equals(param)){
			int num = 201;
			//查询街区和查询城市区是一个方法，只是rank和code不一样
			List<?> list = cityBasicService.queryDistrictMaxSeq(cityCode, rank);
			if(((Map<?, ?>) list.get(0)).get("MAX") != null){
				String maxWhole = ((Map<?, ?>) list.get(0)).get("MAX").toString();
				String max = maxWhole.substring(6,9);
				num = Integer.parseInt(max) + 1;
			}
			if(num > 299){
				return "outof";//代表超过序列
			}
			return String.format("%0"+length+"d", num);
		}else if("school".equals(param)){
			int num = 301;
			//查询街区和查询城市区是一个方法，只是rank和code不一样
			List<?> list = cityBasicService.queryDistrictMaxSeq(cityCode, rank);
			if(((Map<?, ?>) list.get(0)).get("MAX") != null){
				String maxWhole = ((Map<?, ?>) list.get(0)).get("MAX").toString();
				String max = maxWhole.substring(6,9);
				num = Integer.parseInt(max) + 1;
			}
			if(num > 399){
				return "outof";//代表超过序列
			}
			return String.format("%0"+length+"d", num);
		}else if("scence".equals(param)){
			int num = 401;
			//查询街区和查询城市区是一个方法，只是rank和code不一样
			List<?> list = cityBasicService.queryDistrictMaxSeq(cityCode, rank);
			if(((Map<?, ?>) list.get(0)).get("MAX") != null){
				String maxWhole = ((Map<?, ?>) list.get(0)).get("MAX").toString();
				String max = maxWhole.substring(6,9);
				num = Integer.parseInt(max) + 1;
			}
			if(num > 499){
				return "outof";//代表超过序列
			}
			return String.format("%0"+length+"d", num);
		}else if("subwayStation".equals(param)){
			int num = 500001;
			//查询街区和查询城市区是一个方法，只是rank和code不一样
			List<?> list = cityBasicService.queryDistrictMaxSeq(cityCode, rank);
			if(((Map<?, ?>) list.get(0)).get("MAX") != null){
				String maxWhole = ((Map<?, ?>) list.get(0)).get("MAX").toString();
				String max = maxWhole.substring(6,12);
				num = Integer.parseInt(max) + 1;
			}
			if(num > 599999){
				return "outof";//代表超过序列
			}
			return String.format("%0"+length+"d", num);
		}
		
		return "param is error";
		
	}
	
	/**
	 *  城市管理删除
	 * @param request
	 * @param response
	 * @param categoryid
	 * @throws UnknownHostException
	 */
	@RequestMapping("/delCity.do")
	public void delCity(HttpServletRequest request, HttpServletResponse response, String cityCode)
			throws UnknownHostException {
		LoginUser loginUser = (LoginUser) request.getSession(true).getAttribute(RequestUtil.LOGIN_USER_SESSION_KEY);
		Staff staff = loginUser.getStaff();
		String recordUser = staff.getStaffId();
		String[] cityCodes = cityCode.split(",");
		for (int i = 0; i < cityCodes.length; i++) {
			if (cityCodes[i] != null) {
				City city = ((City) (cityBasicService.findOneByProperties(City.class,
						"adminiCode", cityCodes[i])));
				city.setStatus("0");
				city.setRecordUser(recordUser);
				city.setRecordTime(new Date());
			}
		}
		JSONUtil.responseJSON(response, new AjaxResult(1, null));
	}
}
