package com.ideassoft.pmsinhouse.task;

import java.net.InetAddress;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.apache.log4j.Logger;

import com.ideassoft.bean.Check;
import com.ideassoft.bean.CheckUser;
import com.ideassoft.bean.House;
import com.ideassoft.bean.OperateLog;
import com.ideassoft.bean.Order;
import com.ideassoft.bean.RepairApply;
import com.ideassoft.core.constants.SystemConstants;
import com.ideassoft.core.constants.SystemConstants.ProjectName;
import com.ideassoft.core.factory.ServiceFactory;
import com.ideassoft.core.task.ScheduledTask;

import com.ideassoft.pmsinhouse.service.HouseDailyService;
import com.ideassoft.util.DateUtil;

public class HouseCheckOutTask extends ScheduledTask implements ProjectName {

	private final Logger logger = Logger.getLogger(HouseCheckOutTask.class);

	private static HouseDailyService houseDailyService = null;
	
	
	private static String adminName;;

	public HouseCheckOutTask(String name) {
		super(name);
	}
	
	public void initScheduledData() {
		houseDailyService = (HouseDailyService) ServiceFactory.getService("houseDailyService");
		adminName = SystemConstants.User.ADMIN_NAME;
		logger.debug("schedule task [test1111] init...............");
	}

	@SuppressWarnings("unchecked")
	public void run() {
		try {
			//SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
			Date date = new Date();
			List<Order> orders = houseDailyService.findByProperties(Order.class, "theme", "3", "status", "3");
			for (Order order : orders) {
				if(order.getLeaveTime().getTime() <= date.getTime()){
					Check check = (Check) houseDailyService.findById(Check.class, order.getOrderId());
					if(check != null){
						House house = (House) houseDailyService.findOneByProperties(House.class, "houseId", order.getBranchId());
						List<CheckUser> checkUsers = houseDailyService.findByProperties(CheckUser.class, "checkId", order.getOrderId());
						
						for(CheckUser checkUser : checkUsers){
							checkUser.setStatus("0");
							houseDailyService.update(checkUser);
						}
						
						OperateLog operlog = new OperateLog();
						operlog.setBranchId(check.getBranchId());
						operlog.setLogId(DateUtil.currentDate("yyMMdd") + check.getBranchId() + houseDailyService.getSequence("SEQ_OPERATELOG_ID"));
						String operid = InetAddress.getLocalHost().toString();// IP地址
						operid = (String) operid.subSequence(operid.indexOf("/") + 1, operid.length());
						operlog.setOperIp(operid);
						operlog.setOperType("11");
						operlog.setOperModule("退房操作(民宿)");
						operlog.setContent("房间号" + check.getRoomId() + "退房(未结账)");
						operlog.setRecordUser(adminName);
						operlog.setRecordTime(new Date());
						
						//List<RepairApply> repairApplys = houseDailyService.findByProperties(RepairApply.class, "branchId", order.getBranchId(), "contractId", order.getOrderId());
						List<RepairApply> repairApplys = houseDailyService.findByProperties(RepairApply.class, "branchId", order.getBranchId());
						String status  = "Z";
						if(repairApplys.size() > 0){
							for(RepairApply repairApply : repairApplys){
								if(repairApply.getStatus().equals("2") || repairApply.getStatus().equals("3")){
									status = "W";
								}
							}
						}
						
						house.setStatus(status);
						order.setStatus("6");
						check.setStatus("3");
						check.setCheckoutTime(new Date());
						order.setCheckoutTime(new Date());
						houseDailyService.update(order);
						houseDailyService.update(house);
						houseDailyService.update(check);
						houseDailyService.save(operlog);
					}
					//roomService.upateroomstatus(order.getBranchId(), order.getRoomId(), "1");
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}