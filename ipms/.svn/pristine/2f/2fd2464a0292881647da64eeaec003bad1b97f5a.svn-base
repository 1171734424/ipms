package com.ideassoft.basic.controller;


import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.ideassoft.basic.service.UserBasicService;
import com.ideassoft.bean.Branch;
import com.ideassoft.bean.Department;
import com.ideassoft.bean.Post;
import com.ideassoft.bean.Staff;
import com.ideassoft.core.ajax.AjaxResult;
import com.ideassoft.core.bean.LoginUser;
import com.ideassoft.crm.controller.UserController;
import com.ideassoft.util.JSONUtil;
import com.ideassoft.util.RequestUtil;



@Transactional
@Controller
public class UserCtrl {
	@Autowired
	private UserBasicService userBasicService;
	
	private Logger logger = Logger.getLogger(UserController.class);

	@RequestMapping("/personInfo.do")
	public ModelAndView personInfo(HttpServletRequest request, HttpServletResponse response) {
		LoginUser loginUser = (LoginUser) request.getSession(true).getAttribute(RequestUtil.LOGIN_USER_SESSION_KEY);
		ModelAndView mv = new ModelAndView();
		if (loginUser.getStaff().getStaffName().equals("admin")) {
			mv.setViewName("page/basic/user/personInfo");
		} else {
			String staffId = loginUser.getStaff().getStaffId();
			SimpleDateFormat myFmt=new SimpleDateFormat("yyyy/MM/dd");
			Staff staffInfo = (Staff) userBasicService.findOneByProperties(Staff.class, "staffId", staffId);
			Post postinfo = (Post) userBasicService.findOneByProperties(Post.class, "postId", staffInfo.getPost());
			Branch branchName = (Branch) userBasicService.findOneByProperties(Branch.class, "branchId", loginUser.getStaff().getBranchId());
			Department departName = (Department) userBasicService.findOneByProperties(Department.class, "departmentId.branchId", 
					loginUser.getStaff().getBranchId(), "departmentId.departId", staffInfo.getDepartId());
			
			mv.setViewName("page/basic/user/personInfo");
			mv.addObject("staffInfo", staffInfo);
			mv.addObject("birthday", staffInfo.getBirthday()==null?"":myFmt.format(staffInfo.getBirthday()));
			mv.addObject("entryTime", myFmt.format(staffInfo.getEntryTime()));
			mv.addObject("postName",postinfo.getPostName());
			mv.addObject("branchName", branchName.getBranchName());
			if (departName != null) {
				mv.addObject("departName", departName.getDepartName()==null?"":departName.getDepartName());
			}
			mv.addObject("mygendor", staffInfo.getGendor());
		}
		return mv;
	}
	
	@RequestMapping("/editPersonInfo.do")
	public void editPersonInfo(Staff staff, String birthday1, HttpServletRequest request, HttpServletResponse response) throws ParseException {
		List<?> infoByPhone = userBasicService.findByProperties(Staff.class, "mobile", staff.getMobile());
		List<?> infoByLoingName = userBasicService.findByProperties(Staff.class, "loginName", staff.getLoginName());
		List<?> infoBYIdCard = userBasicService.findByProperties(Staff.class, "idcard", staff.getIdcard());
		SimpleDateFormat myFmt=new SimpleDateFormat("yyyy/MM/dd");
		String flag = "";
		
		if (infoByPhone.size() > 1) {
			JSONUtil.responseJSON(response, new AjaxResult(1, "已有该手机号，请重新输入!"));
		} else if (infoByLoingName.size() > 1) {
			JSONUtil.responseJSON(response, new AjaxResult(2, "已有该登录名，请重新输入!"));
		} else if (infoBYIdCard.size() > 1) {
			JSONUtil.responseJSON(response, new AjaxResult(3, "已有该身份证号，请重新输入!"));
		} else { 
			if (infoByPhone.size() > 0) {
				if (infoByPhone.size() == 1 && !staff.getStaffId().equals(((Staff) infoByPhone.get(0)).getStaffId())) {
					flag = "1";
					JSONUtil.responseJSON(response, new AjaxResult(1, "已有该手机号，请重新输入!"));
				}
			} 
			if (infoByLoingName.size() > 0) {
				if (infoByLoingName.size() == 1 && !staff.getStaffId().equals(((Staff) infoByLoingName.get(0)).getStaffId())) {
					flag = "2";
					JSONUtil.responseJSON(response, new AjaxResult(2, "已有该登录名，请重新输入!"));
				}
			} 
			if (infoBYIdCard.size() > 0) {
				if (infoBYIdCard.size() == 1 && !staff.getStaffId().equals(((Staff) infoBYIdCard.get(0)).getStaffId())) {
					flag = "3";
					JSONUtil.responseJSON(response, new AjaxResult(3, "已有该身份证号，请重新输入!"));
				}
			}  
			if (("").equals(flag)) {
				Staff staffInfo = (Staff) userBasicService.findOneByProperties(Staff.class, "staffId", staff.getStaffId());
				staffInfo.setAddress(staff.getAddress());
				staffInfo.setBirthday(birthday1==""?null:myFmt.parse(birthday1));
				staffInfo.setEmail(staff.getEmail());
				staffInfo.setMobile(staff.getMobile());
				staffInfo.setGendor(staff.getGendor());
				staffInfo.setIdcard(staff.getIdcard());
				staffInfo.setLoginName(staff.getLoginName());
				staffInfo.setMobile(staff.getMobile());
				staffInfo.setRecordTime(new Date());
				staffInfo.setStaffName(staff.getStaffName());
				staffInfo.setEntryTime(staff.getEntryTime());
				staffInfo.setRemark(staff.getRemark());
				userBasicService.save(staffInfo);
				JSONUtil.responseJSON(response, new AjaxResult(4, "编辑成功!"));
			}
		}
	}
	
	
	/**
	 * 修改密码
	 */
	@RequestMapping("/password.do")
	public ModelAndView loadPassword(HttpServletRequest request) {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("page/basic/user/password");
		return mv;
	}
	
	@RequestMapping("/change_password.do")
	public void changePassword(String oldPassword, String newPassword, HttpServletRequest request,
			HttpServletResponse response) {
		String msg = null;
		LoginUser loginUser = (LoginUser) request.getSession(true).getAttribute(RequestUtil.LOGIN_USER_SESSION_KEY);
		Staff staff = loginUser.getStaff();
		if (!oldPassword.trim().equals(staff.getPassword())) {
			msg = "{\"error\": \"PASSWORD_INCORRECT\"}";
		} else {
			staff.setPassword(newPassword);
			userBasicService.update(staff);
			loginUser.setStaff(staff);
			HttpSession session = request.getSession(true);
			session.removeAttribute(RequestUtil.LOGIN_USER_SESSION_KEY);
			session.setAttribute(RequestUtil.LOGIN_USER_SESSION_KEY, loginUser);

			msg = "{\"sucess\": \"OK\"}";
		}

		try {
			response.getWriter().write(msg);
		} catch (IOException e) {
			logger.error("LoginController change password error!");
		}
	}
}
