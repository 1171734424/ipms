package com.ideassoft.crm.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.poi.xwpf.converter.core.FileImageExtractor;
import org.apache.poi.xwpf.converter.core.FileURIResolver;
import org.apache.poi.xwpf.converter.xhtml.XHTMLConverter;
import org.apache.poi.xwpf.converter.xhtml.XHTMLOptions;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.hsqldb.lib.StringUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.ideassoft.bean.Bill;
import com.ideassoft.bean.Campaign;
import com.ideassoft.bean.Contrart;
import com.ideassoft.bean.CouponGroup;
import com.ideassoft.bean.Member;
import com.ideassoft.bean.MemberAccount;
import com.ideassoft.bean.MemberCoupon;
import com.ideassoft.bean.MemberRank;
import com.ideassoft.bean.RoomType;
import com.ideassoft.bean.SysParam;
import com.ideassoft.core.ajax.AjaxResult;
import com.ideassoft.core.bean.LoginUser;
import com.ideassoft.core.constants.SystemConstants;
import com.ideassoft.core.notifier.SmsSingleSender;
import com.ideassoft.core.page.Pagination;
import com.ideassoft.crm.service.LogService;
import com.ideassoft.crm.service.MemberService;
import com.ideassoft.crm.service.TransferServcie;
import com.ideassoft.portal.DataDealPortalService;
import com.ideassoft.portal.IDataDealPortal;
import com.ideassoft.util.DateUtil;
import com.ideassoft.util.JSONUtil;
import com.ideassoft.util.MD5Util;
import com.ideassoft.util.ReflectUtil;
import com.ideassoft.util.RequestUtil;

@Transactional
@Controller
public class MemberController {

	@Autowired
	private MemberService memberService;

	@Autowired
	private LogService logService;

	

	


	// pms处新增会员购卡
	@RequestMapping("/payUpGradeMemberLevelInPms.do")
	public ModelAndView payUpGradeMemberLevelInPms(HttpServletRequest request,
			HttpServletResponse response) {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("page/ipmspage/member/memberLevelInPms");
		return mv;
	}

	

	@RequestMapping("/queryMemberInfo.do")
	public ModelAndView queryMemberInfo(HttpServletRequest request,
			HttpServletResponse response, String msoidcard) {
		ModelAndView mv = new ModelAndView();
		String gendor = "";
		if (!StringUtil.isEmpty(msoidcard)) {
			if (msoidcard.length() > 11) {
				Member member = (Member) memberService.findOneByProperties(
						Member.class, "idcard", msoidcard);
				MemberAccount memberAccount = (MemberAccount) memberService
						.findOneByProperties(MemberAccount.class, "memberId",
								member.getMemberId());
				MemberRank rank = (MemberRank) memberService
						.findOneByProperties(MemberRank.class, "memberRank",
								member.getMemberRank());
				switch (Integer.parseInt(member.getGendor())) {
				case 0:
					gendor = "女";
					mv.addObject("gendor", gendor);
				case 1:
					gendor = "男";
					mv.addObject("gendor", gendor);
				default:
				}
				mv.addObject("member", member);
				mv.addObject("memberAccount", memberAccount);
				mv.addObject("rank", rank);
				mv.setViewName("page/ipmspage/member/memberpage");
			} else {
				Member member = (Member) memberService.findOneByProperties(
						Member.class, "mobile", msoidcard);
				MemberAccount memberAccount = (MemberAccount) memberService
						.findOneByProperties(MemberAccount.class, "memberId",
								member.getMemberId());
				MemberRank rank = (MemberRank) memberService
						.findOneByProperties(MemberRank.class, "memberRank",
								member.getMemberRank());
				switch (Integer.parseInt(member.getGendor())) {
				case 0:
					gendor = "女";
					mv.addObject("gendor", gendor);
					break;
				case 1:
					gendor = "男";
					mv.addObject("gendor", gendor);
					break;
				default:
				}
				mv.addObject("member", member);
				mv.addObject("memberAccount", memberAccount);
				mv.addObject("rank", rank);
				mv.setViewName("page/ipmspage/member/memberpage");
			}
		} else {
			mv.setViewName("page/ipmspage/member/memberpagenull");
		}
		return mv;
	}

	
	
	

	

	@RequestMapping("/queryContract.do")
	public ModelAndView queryContract(HttpServletRequest request,
			HttpServletResponse response, String contract) throws IOException {
		ModelAndView mv = new ModelAndView();
		new JSONObject();
		Contrart contrart = (Contrart) memberService.findById(Contrart.class, contract);
		if (null != contrart.getContrart()) {
			String webPath = RequestUtil.getWebPath().replace("\\", "/");
			String contractPath = contrart.getContrart();
			if ((new File(webPath + "/upload/" + contractPath)).exists()) {
				contractToHtml(webPath + "/upload/" + contractPath, webPath + "/upload/", webPath + "/upload/1.html");
				mv.addObject("contract", contractPath);
			} else {
				DataDealPortalService service = new DataDealPortalService();
				IDataDealPortal portal = service.getDataDealPortalPort();
				String contractUrl = portal.call(1, 1, "{ function: \"yunSign.contractQuery\", data:{memberId:" + contrart.getMemberId() + ",orderId:" + contrart.getContrart() + "} }");
				mv.addObject("contractUrl", JSONObject.fromObject(contractUrl).get("contractHtml").toString());
			}
			mv.addObject("ifNull", "true");
		} else {
			mv.addObject("contract", null);
			mv.addObject("ifNull", "false");
		}
		mv.setViewName("page/crm/member/contract");
		return mv;
	}

	@RequestMapping("/rentRenewal.do")
	public ModelAndView rentRenewal(HttpServletRequest request,
			HttpServletResponse response, String contractId) throws IOException {
		ModelAndView mv = new ModelAndView();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
		Contrart contrart = (Contrart) memberService.findById(Contrart.class, contractId);
		Member member = (Member) memberService.findById(Member.class, contrart.getMemberId());
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(contrart.getContrartEndTime());
		calendar.add(Calendar.MONTH, Integer.parseInt(contrart.getTypeOfPayment()));
		String typeofpaymentName = "";
		if (contrart.getTypeOfPayment().equals("1")) {
			typeofpaymentName = "月付";
		} else if (contrart.getTypeOfPayment().equals("3")) {
			typeofpaymentName = "季付";
		} else if (contrart.getTypeOfPayment().equals("6")) {
			typeofpaymentName = "半年付";
		} else if (contrart.getTypeOfPayment().equals("12")) {
			typeofpaymentName = "年付";
		}
		mv.addObject("contractId", contractId);
		mv.addObject("memberName", member.getMemberName());
		mv.addObject("roomId", contrart.getRoomId());
		Double money = Double.parseDouble(contrart.getUnitPrice()) * Double.parseDouble(contrart.getTypeOfPayment());
		mv.addObject("money",String.format("%.2f", money));
		mv.addObject("typeofpaymentName", typeofpaymentName);
		mv.addObject("unitPrice", contrart.getUnitPrice());
		mv.addObject("endTime", sdf.format(calendar.getTime()));
		mv.setViewName("page/crm/member/rentRenewal");
		return mv;
	}

	@RequestMapping("/changeApartmentRent.do")
	public void apartmentRent(HttpServletRequest request, HttpServletResponse response, String contractId) throws IOException {
		LoginUser loginUser = (LoginUser) request.getSession(true).getAttribute(RequestUtil.LOGIN_USER_SESSION_KEY);
		Contrart contrart = (Contrart) memberService.findById(Contrart.class, contractId);
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(contrart.getContrartEndTime());
		calendar.add(Calendar.MONTH, Integer.parseInt(contrart.getTypeOfPayment()));
		contrart.setContrartEndTime(calendar.getTime());
		contrart.setRecordTime(new Date());
		
		Bill bill = new Bill();
		String billId = DateUtil.currentDate("yyMMdd") + contrart.getBranchId() + "3" + memberService.getSequence("SEQ_NEW_BILL");
		bill.setBillId(billId);
		bill.setBranchId(contrart.getBranchId());
		bill.setCheckId(contrart.getContrartId());
		bill.setProjectId("2004");
		bill.setProjectName("房租");
		bill.setDescribe("交租");
		bill.setPayment("2");
		bill.setCost(0.0);
		bill.setPay(Double.parseDouble(contrart.getTypeOfPayment()) * Double.parseDouble(contrart.getUnitPrice()));
		bill.setStatus("1");
		bill.setRecordTime(new Date());
		bill.setRecordUser(loginUser.getStaff().getStaffId());
		
		logService.changeApartmentRent((LoginUser) request.getSession(true).getAttribute(RequestUtil.LOGIN_USER_SESSION_KEY), contrart.getRoomId(), contrart.getTypeOfPayment(),request);
		memberService.saveIfo(bill);
		memberService.update(contrart);
		String result = "{\"code\":\"1\"}";
		JSONUtil.responseJSON(response, result);
	}

	

	public static void contractToHtml(String fileName, String imageFile,
			String htmFile) throws IOException {
		File f = new File(fileName);
		if (f.getName().endsWith(".docx") || f.getName().endsWith(".DOCX")
				|| f.getName().endsWith(".doc")) {
			InputStream in = new FileInputStream(f);
			XWPFDocument document = new XWPFDocument(in);
			File imgFile = new File(imageFile);
			XHTMLOptions options = XHTMLOptions.create().URIResolver(
					new FileURIResolver(imgFile));
			options.setExtractor(new FileImageExtractor(imgFile));
			OutputStream out = new FileOutputStream(new File(htmFile));
			XHTMLConverter.getInstance().convert(document, out, options);
		}
	}

	@RequestMapping("/turnToContrartAddPage.do")
	public ModelAndView turnToCampaignsAddPage(HttpServletRequest request)
			throws Exception {
		ModelAndView mv = new ModelAndView();
		List<SysParam> paymentList = memberService.findByProperties(SysParam.class,"paramType", "PAYMENT","status","1");
		//支付方式
		mv.addObject("paymentList",paymentList);
		mv.setViewName("page/crm/member/addContrart");
		return mv;
	}

	//@RequestMapping("/updateContrart.do")
	public ModelAndView updateContrart(HttpServletRequest request,
			String contractId) throws Exception {
		ModelAndView mv = new ModelAndView();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
		Contrart contrart = (Contrart) memberService.findById(Contrart.class,
				contractId);
		String starttime = sdf.format(contrart.getStartTime());
		String endtime = sdf.format(contrart.getEndTime());
		String contrartEndTime = sdf.format(contrart.getContrartEndTime());
		Member member = (Member) memberService.findById(Member.class, contrart
				.getMemberId());
		RoomType roomType = (RoomType) memberService.findOneByProperties(
				RoomType.class, "roomType", contrart.getRoomType());
		mv.addObject("contrart", contrart);
		mv.addObject("contrartId", contractId);
		mv.addObject("starttime", starttime);
		mv.addObject("contrartEndTime", contrartEndTime);
		mv.addObject("endtime", endtime);
		mv.addObject("memberName", member.getMemberName());
		mv.addObject("roomType", roomType.getRoomName());
		mv.setViewName("page/crm/member/addContrart");
		return mv;
	}
	
	// 查合同人
	@RequestMapping("/contrartselectmember.do")
	public ModelAndView contrartselectmember(HttpServletRequest request,HttpServletResponse response) {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("page/crm/member/addContrartmemberDialog");
		return mv;
	}
	
	// 查预订单
	@RequestMapping("/contrartaptorder.do")
	public ModelAndView contrartaptorder(HttpServletRequest request,HttpServletResponse response) {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("page/crm/member/aptorderDialog");
		return mv;
	}
	
	

	//合同人详情页数据
	@RequestMapping("/querycontrartmemberinfo.do")
	public void querycontrartmemberinfo(HttpServletRequest request, HttpServletResponse response, String groupId)
			throws Exception {
		Pagination pagination;
		Integer pageNum = Integer.parseInt(request.getParameter("page"));
		Integer rows = Integer.parseInt(request.getParameter("rows"));
		pagination = new Pagination(pageNum, rows);
		List<?> result = memberService.findBySQLWithPagination("allmemberinfo", new String[] {groupId,groupId}, pagination, true);
		JSONUtil.responseJSON(response, JSONUtil.buildReportJSONByPagination(result, pagination));
	}	
	//预订单数据
	@RequestMapping("/querycontrartaptorder.do")
	public void querycontrartaptorder(HttpServletRequest request, HttpServletResponse response, String groupId)
			throws Exception {
		Pagination pagination;
		Integer pageNum = Integer.parseInt(request.getParameter("page"));
		Integer rows = Integer.parseInt(request.getParameter("rows"));
		pagination = new Pagination(pageNum, rows);
		List<?> result = memberService.findBySQLWithPagination("allaptorder", new String[] {groupId,groupId}, pagination, true);
		JSONUtil.responseJSON(response, JSONUtil.buildReportJSONByPagination(result, pagination));
	}	
	
	


	//查房间号
	@RequestMapping("/contrartselectroomid.do")
	public ModelAndView contrartselectroomid(HttpServletRequest request,HttpServletResponse response,String memberrank) {
		ModelAndView mv = new ModelAndView();
		mv.addObject("memberrank",memberrank);
		mv.setViewName("page/crm/member/addContrartRoomidDialog");
		return mv;
	}
	
	// 房间号详情页数据
	@SuppressWarnings("unchecked")
	@RequestMapping("/querycontrartroomidandroomtype.do")
	public void querycontrartroomidandroomtype(HttpServletRequest request, HttpServletResponse response, String groupId,String memberrank)
			throws Exception {
		Pagination pagination;
		LoginUser loginuser = (LoginUser) request.getSession(true)
				.getAttribute(RequestUtil.LOGIN_USER_SESSION_KEY);
		String branchid = loginuser.getStaff().getBranchId();
		Integer pageNum = Integer.parseInt(request.getParameter("page"));
		Integer rows = Integer.parseInt(request.getParameter("rows"));
		pagination = new Pagination(pageNum, rows);
	//	List<?> result = memberService.findBySQLWithPagination("roomidcontrartDetail", new String[] {branchid,groupId,memberrank}, pagination, true);
		List<Map<String,Object>> roominfoList = memberService.findBySQLWithPagination("findunitprice",new String[]{branchid,memberrank,groupId,branchid,branchid,memberrank,groupId,branchid},pagination,true);
		JSONUtil.responseJSON(response, JSONUtil.buildReportJSONByPagination(roominfoList, pagination));
	}	
		




	

	
	//根据房间号和门店号查出此房的定价（基准价或调整价）
	@RequestMapping("/findunitprice.do")
	public void findunitprice(HttpServletRequest request, HttpServletResponse response, String roomid,String memberrank)
			throws Exception {
		LoginUser loginuser = (LoginUser) request.getSession(true).getAttribute(RequestUtil.LOGIN_USER_SESSION_KEY);
		String branchid = loginuser.getStaff().getBranchId();
		List<Map<String,Object>> unitpriceList = memberService.findBySQL("findunitprice",new String[]{memberrank,roomid,branchid},true);
		Double roomprice =  (Double)(unitpriceList.get(0)).get("ROOMPRICE");
		JSONUtil.responseJSON(response, roomprice);
	}
	
	/**
	 * 检验身份证唯一
	 * @param request
	 * @param response
	 * @param idcard
	 */
	@RequestMapping("/uniqueIdcard.do")
	public void uniqueIdcard (HttpServletRequest request, HttpServletResponse response, String idcard) {
		Member member = (Member) memberService.findOneByProperties(Member.class, "idcard", idcard, "status", "1");
		if(member != null){
			JSONUtil.responseJSON(response, new AjaxResult(0, "身份证重复!"));
		} else {
			JSONUtil.responseJSON(response, new AjaxResult(1, "可以注册"));
		}
	}
}
